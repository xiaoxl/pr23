{
  "hash": "f48d4b5fb7d81251fa9deaf00cf0a093",
  "result": {
    "markdown": "# Visualization\n\n\nThe main reference for this Chapter is @McK2017.\n\n\n\n## `matplotlib.pyplot`\n\n`matplotlib` is a modern and classic plot library. Its main features are inspired by `MATLAB`. In this book we mostly use `pyplot` package from `matplotlib`. We use the following import convention:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n### `matplotlib` interface\n\n\n\n`matplotlib` has two major application interfaces, or styles of using the library:\n\n- An explicit `Axes` interface that uses methods on a `Figure` or `Axes` object to create other Artists, and build a visualization step by step. You may treat this `Figure` object as a canvas, and `Axes` as plots on a canvas. There might be one or more plots on one canvas. This has also been called an *object-oriented* interface.\n- An implicit `pyplot` interface that keeps track of the last `Figure` and `Axes` created, and adds Artists to the object it thinks the user wants.\n\nHere is an example of an explicit interface.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfig = plt.figure()\nax = fig.subplots()\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-3-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nHere is an example of an implicit interface.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.plot([1, 2, 3, 4], [0, 0.5, 1, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-4-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.callout-note}\nIf the plot is not shown, you may want to type `plt.show()` to force the plot being rendered. However, to make `plt.show()` work is related to switching `matplotlib` backends, and is sometimes very complicated.\n:::\n\nThe purpose to explicitly use `fig` and `ax` is to have more control over the configurations. The first important configuration is subplots.\n\n- `.subplot()`\n- `.subplots()`\n- `.add_subplot()`\n\nPlease see the following examples.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\nplt.subplot(1, 2, 2)\nplt.plot([3, 2, 1], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-6-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig, axs = plt.subplots(1, 2)\naxs[0].plot([1, 2, 3], [0, 0.5, 0.2])\naxs[1].plot([3, 2, 1], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\nfig = plt.figure()\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 3)\nax3 = fig.add_subplot(1, 2, 2)\n\nax3.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-8-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThe auguments `2, 2, 1` means that we split the figure into a `2x2` grid and the axis `ax1` is in the 1st position. The rest is understood in the same way.\n:::\n\n\n::: {#exm-}\nIf you don't explicitly initialize `fig` and `ax`, you may use `plt.gcf()` and `plt.gca()` to get the handles for further operations.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nax = plt.gca()\nax.plot([1, 2, 3], [0, 0.5, 0.2])\n\nplt.subplot(1, 2, 2)\nax = plt.gca()\nax.plot([3, 2, 1], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-9-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n\nThe purpose to explicitly use `fig` and `ax` is to have more control over the configurations. For example, when generate a `figure` object, we may use `figsize=(3, 3)` as an option to set the figure size to be `3x3`. `dpi` is another commonly modified option.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfig = plt.figure(figsize=(2, 2), dpi=50)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-10-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nIf you would like to change this setting later, you may use the following command before plotting. \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfig.set_size_inches(10, 10)\nfig.set_dpi(300)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-11-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nYou may use `fig.savefig('filename.png')` to save the image into a file.\n\n\n### Downstream packages\nThere are multiple packages depending on `matplotlib` to provide plotting. For example, you may directly plot from a Pandas DataFrame or a Pandas Series.\n\n::: {#exm-}\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ns = pd.Series(np.random.randn(10).cumsum(), index=np.arange(0, 100, 10))\ns.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-12-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf = pd.DataFrame(np.random.randn(10, 4).cumsum(0),\n                  columns=['A', 'B', 'C', 'D'],\n                  index=np.arange(0, 100, 10))\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-13-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n### plotting \n#### `plt.plot()`\nThis is the command for line plotting. You may use `linestyle='--'` and `color='g'` to control the line style and color. The style can be shortened as `g--`. \n\nHere is a list of commonly used linestyles and colors.\n\n- line styles\n    - `solid` or `-`\n    - `dashed` or `--`\n    - `dashdot` or `-.`\n    - `dotted` or `:`\n- marker styles\n    - `o` as circle markers\n    - `+` as plusses\n    - `^` as triangles\n    - `s` as squares\n- colors\n    - `b` as blue\n    - `g` as green\n    - `r` as red\n    - `k` as black\n    - `w` as white\n\nThe input of `plt.plot()` is two lists `x` and `y`. If there is only one list inputed, that one will be recognized as `y` and the index of elements of `y` will be used as the dafault `x`.\n\n\n::: {#exm-plot1}\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nplt.plot(np.random.randn(30).cumsum(), color='r', linestyle='--', marker='o')\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-14-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nYou may compare it with this [Example](#exm-plotwithsns) for the purpose of `seaborn` from next Section.\n:::\n\n#### `plt.bar()` and `plt.barh()`\nThe two commands make vertical and horizontal bar plots, respectively.\n::: {#exm-}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport pandas as pd\ndata = pd.Series(np.random.rand(16), index=list('abcdefghijklmnop'))\n\nfig, axes = plt.subplots(2, 1)\naxes[0].bar(x=data.index, height=data, color='k', alpha=0.7)\naxes[1].barh(y=data.index, width=data, color='b', alpha=0.7)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<BarContainer object of 16 artists>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-15-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe may also directly plot the bar plot from the Series. \n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 1)\ndata.plot.bar(ax=axes[0], color='k', alpha=0.7)\ndata.plot.barh(ax=axes[1], color='b', alpha=0.7)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-16-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n\nWith a DataFrame, bar plots group the values in each row together in a group in bars. This is easier if we directly plot from the DataFrame.\n\n::: {#exm-}\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf = pd.DataFrame(np.random.rand(6, 4),\n                  index=['one', 'two', 'three', 'four', 'five', 'six'],\n                  columns=pd.Index(['A', 'B', 'C', 'D'], name='Genus'))\ndf\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=tex}\n\\begin{tabular}{lrrrr}\n\\toprule\nGenus &         A &         B &         C &         D \\\\\n\\midrule\none   &  0.676124 &  0.676782 &  0.166391 &  0.143815 \\\\\ntwo   &  0.996046 &  0.983176 &  0.263900 &  0.093289 \\\\\nthree &  0.972652 &  0.816129 &  0.302015 &  0.541059 \\\\\nfour  &  0.913474 &  0.540784 &  0.946010 &  0.378645 \\\\\nfive  &  0.756770 &  0.061088 &  0.354990 &  0.587922 \\\\\nsix   &  0.359603 &  0.892017 &  0.602121 &  0.419805 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf.plot.bar()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-18-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf.plot.barh(stacked=True, alpha=0.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-19-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n#### `plt.scatter()`\n\n\n::: {#exm-}\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nimport numpy as np\n\nN = 100\ndata = 0.9 * np.random.rand(N, 2)\narea = (20 * np.random.rand(N))**2 \nc = np.sqrt(area)\nplt.scatter(data[:, 0], data[:, 1], s=area, marker='^', c=c)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<matplotlib.collections.PathCollection at 0x1bf9b527ee0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-20-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n#### `plt.hist()`\nHere are two plots with build-in statistics. The plot command will have statistics as outputs. To disable it we could send the outputs to a temporary variable `_`.\n::: {#exm-histogram1}\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\ny = mu-30 + sigma*2 * np.random.randn(10000)\n_ = plt.hist(x, 50, density=True, facecolor='g', alpha=0.75)\n_ = plt.hist(y, 50, density=True, facecolor='r', alpha=0.75)\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-21-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n### `plt.boxplot()`\n\n::: {#exm-}\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nspread = np.random.rand(50) * 100\ncenter = np.ones(30) * 50\nflier_high = np.random.rand(10) * 100 + 100\nflier_low = np.random.rand(10) * -100\ndata = np.concatenate((spread, center, flier_high, flier_low)).reshape(50, 2)\n\n_ = plt.boxplot(data, flierprops={'markerfacecolor': 'g', 'marker': 'D'})\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-22-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n### Titles, labels and legends\n\n- Titles\n    - `plt.title(label)`, `plt.xlabel(label)`, `plt.ylabel(label)` will set the title/xlabel/ylabel.\n    - `ax.set_title(label)`, `ax.set_xlabel(label)`, `ax.set_ylabel(label)` will do the same thing.\n- Labels\n    - `plt` methods\n        - `xlim()`, `ylim()`, `xticks()`, `yticks()`, `xticklabels()`, `yticklabels()`\n        - all the above with arguments\n    - `ax` methods\n        - `get_xlim()`, `get_ylim()`, etc..\n        - `set_xlim()`, `set_ylim()`, etc..\n- Legneds\n    - First add `label` option to each piece when plotting, and then add `ax.legends()` or `plt.legends()` at the end to display the legends.\n    - You may use `handles, labels = ax.get_legend_handles_labels()` to get the handles and labels of the legends, and modify them if necessary.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nimport numpy as np\nfig, ax = plt.subplots(1, 1)\nax.plot(np.random.randn(1000).cumsum(), 'k', label='one')\nax.plot(np.random.randn(1000).cumsum(), 'r--', label='two')\nax.plot(np.random.randn(1000).cumsum(), 'b.', label='three')\n\nax.set_title('Example')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\nax.set_yticks([-40, 0, 40])\nax.set_yticklabels(['good', 'bad', 'ugly'])\n\nax.legend(loc='best')\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<matplotlib.legend.Legend at 0x1bf9b301030>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-23-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n### Annotations\n\n- The command to add simple annotations is `ax.text()`. The required auguments are the coordinates of the text and the text itself. You may add several options to modify the style.\n- If arrows are needed, we may use `ax.annotation()`. Here an arrow will be shown from `xytext` to `xy`. The style of the arrow is controlled by the option `arrowprops`.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(5, 5))\nax.plot(np.random.randn(1000).cumsum(), 'k', label='one')\nax.text(500, 0, 'Hello world!', family='monospace', fontsize=15, c='r')\nax.annotate('test', xy=(400, 0), xytext=(400, -10), c='r',\n            arrowprops={'facecolor': 'black',\n                        'shrink': 0.05})\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nText(400, -10, 'test')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-24-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n### Example\n\n::: {#exm-}\nThe stock data can be downloaded from [here](assests/datasets/spx.csv). \n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nfrom datetime import datetime\nfig, ax = plt.subplots()\ndata = pd.read_csv('assests/datasets/spx.csv', index_col=0, parse_dates=True)\nspx = data['SPX']\nspx.plot(ax=ax, style='k-')\ncrisis_data = [(datetime(2007, 10, 11), 'Peak of bull market'),\n               (datetime(2008, 3, 12), 'Bear Stearns Fails'),\n               (datetime(2008, 9, 15), 'Lehman Bankruptcy')]\nfor date, label in crisis_data:\n    ax.annotate(label, xy=(date, spx.asof(date) + 75),\n                xytext=(date, spx.asof(date) + 225),\n                arrowprops=dict(facecolor='black', headwidth=4, width=2,\n                                headlength=4),\n                horizontalalignment='left', verticalalignment='top')\nax.set_xlim(['1/1/2007', '1/1/2011'])\nax.set_ylim([600, 1800])\n_ = ax.set_title('Important dates in the 2008-2009 financial crisis')\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-25-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n::: {#exm-}\nHere is an example of arrows with different shapes. For more details please read the official [document](https://matplotlib.org/stable/tutorials/text/annotations.html#annotating-with-arrow).\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 20, 1000)\nax.plot(x, np.cos(x))\nax.axis('equal')\n\nax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6),\n            arrowprops=dict(arrowstyle=\"->\",\n                            connectionstyle=\"angle3,angleA=0,angleB=-90\",\n                            color='r'))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nText(2, -6, 'local minimum')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-26-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n## `seaborn`\n\nThere are some new libraries built upon `matplotlib`, and `seaborn` is one of them. `seaborn` is for statistical graphics. \n\n`seaborn` is used imported in the following way.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nimport seaborn as sns\n```\n:::\n\n\n\n\n`seaborn` also modifies the default `matplotlib` color schemes and plot styles to improve readability and aesthetics. Even if you do not use the `seaborn` API, you may prefer to import `seaborn` as a simple way to improve the visual aesthetics of general `matplotlib` plots.\n\nTo apply `sns` theme, run the following code.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nsns.set_theme()\n```\n:::\n\n\nLet us directly run a few codes from the last section and compare the differences between them.\n\n\n\n::: {#exm-plotwithsns}\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nplt.plot(np.random.randn(30).cumsum(), color='r', linestyle='--', marker='o')\n```\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-30-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nPlease compare the output of the same code with [the previous example](#exm-plot1)\n:::\n\n\n### Scatter plots with `relplot()`\n\nThe basic scatter plot method is `scatterplot()`. It is wrapped in `relplot()` as the default plotting method. So here we will mainly talk about `relplot()`. It is named that way because it is designed to visualize many different statistical relationships. \n\nThe idea of `relplot()` is to display points based on the variables `x` and `y` you choose, and assign different properties to alter the apperance of the points. \n\n- `col` will create multiple plots based on the column you choose.\n- `hue` is for color encoding, based on the column you choose.\n- `size` will change the marker area, based on the column you choose.\n- `style` will change the marker symbol, based on the column you choose.\n\n\n::: {#exm-}\nConsider the following example. `tips` is a DataFrame, which is shown below.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nimport seaborn as sns\ntips = sns.load_dataset(\"tips\")\ntips\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=tex}\n\\begin{tabular}{lrrllllr}\n\\toprule\n{} &  total\\_bill &    tip &     sex & smoker &   day &    time &  size \\\\\n\\midrule\n0   &       16.99 &   1.01 &  Female &     No &   Sun &  Dinner &     2 \\\\\n1   &       10.34 &   1.66 &    Male &     No &   Sun &  Dinner &     3 \\\\\n2   &       21.01 &   3.50 &    Male &     No &   Sun &  Dinner &     3 \\\\\n3   &       23.68 &   3.31 &    Male &     No &   Sun &  Dinner &     2 \\\\\n4   &       24.59 &   3.61 &  Female &     No &   Sun &  Dinner &     4 \\\\\n5   &       25.29 &   4.71 &    Male &     No &   Sun &  Dinner &     4 \\\\\n6   &        8.77 &   2.00 &    Male &     No &   Sun &  Dinner &     2 \\\\\n7   &       26.88 &   3.12 &    Male &     No &   Sun &  Dinner &     4 \\\\\n8   &       15.04 &   1.96 &    Male &     No &   Sun &  Dinner &     2 \\\\\n9   &       14.78 &   3.23 &    Male &     No &   Sun &  Dinner &     2 \\\\\n10  &       10.27 &   1.71 &    Male &     No &   Sun &  Dinner &     2 \\\\\n11  &       35.26 &   5.00 &  Female &     No &   Sun &  Dinner &     4 \\\\\n12  &       15.42 &   1.57 &    Male &     No &   Sun &  Dinner &     2 \\\\\n13  &       18.43 &   3.00 &    Male &     No &   Sun &  Dinner &     4 \\\\\n14  &       14.83 &   3.02 &  Female &     No &   Sun &  Dinner &     2 \\\\\n15  &       21.58 &   3.92 &    Male &     No &   Sun &  Dinner &     2 \\\\\n16  &       10.33 &   1.67 &  Female &     No &   Sun &  Dinner &     3 \\\\\n17  &       16.29 &   3.71 &    Male &     No &   Sun &  Dinner &     3 \\\\\n18  &       16.97 &   3.50 &  Female &     No &   Sun &  Dinner &     3 \\\\\n19  &       20.65 &   3.35 &    Male &     No &   Sat &  Dinner &     3 \\\\\n20  &       17.92 &   4.08 &    Male &     No &   Sat &  Dinner &     2 \\\\\n21  &       20.29 &   2.75 &  Female &     No &   Sat &  Dinner &     2 \\\\\n22  &       15.77 &   2.23 &  Female &     No &   Sat &  Dinner &     2 \\\\\n23  &       39.42 &   7.58 &    Male &     No &   Sat &  Dinner &     4 \\\\\n24  &       19.82 &   3.18 &    Male &     No &   Sat &  Dinner &     2 \\\\\n25  &       17.81 &   2.34 &    Male &     No &   Sat &  Dinner &     4 \\\\\n26  &       13.37 &   2.00 &    Male &     No &   Sat &  Dinner &     2 \\\\\n27  &       12.69 &   2.00 &    Male &     No &   Sat &  Dinner &     2 \\\\\n28  &       21.70 &   4.30 &    Male &     No &   Sat &  Dinner &     2 \\\\\n29  &       19.65 &   3.00 &  Female &     No &   Sat &  Dinner &     2 \\\\\n30  &        9.55 &   1.45 &    Male &     No &   Sat &  Dinner &     2 \\\\\n31  &       18.35 &   2.50 &    Male &     No &   Sat &  Dinner &     4 \\\\\n32  &       15.06 &   3.00 &  Female &     No &   Sat &  Dinner &     2 \\\\\n33  &       20.69 &   2.45 &  Female &     No &   Sat &  Dinner &     4 \\\\\n34  &       17.78 &   3.27 &    Male &     No &   Sat &  Dinner &     2 \\\\\n35  &       24.06 &   3.60 &    Male &     No &   Sat &  Dinner &     3 \\\\\n36  &       16.31 &   2.00 &    Male &     No &   Sat &  Dinner &     3 \\\\\n37  &       16.93 &   3.07 &  Female &     No &   Sat &  Dinner &     3 \\\\\n38  &       18.69 &   2.31 &    Male &     No &   Sat &  Dinner &     3 \\\\\n39  &       31.27 &   5.00 &    Male &     No &   Sat &  Dinner &     3 \\\\\n40  &       16.04 &   2.24 &    Male &     No &   Sat &  Dinner &     3 \\\\\n41  &       17.46 &   2.54 &    Male &     No &   Sun &  Dinner &     2 \\\\\n42  &       13.94 &   3.06 &    Male &     No &   Sun &  Dinner &     2 \\\\\n43  &        9.68 &   1.32 &    Male &     No &   Sun &  Dinner &     2 \\\\\n44  &       30.40 &   5.60 &    Male &     No &   Sun &  Dinner &     4 \\\\\n45  &       18.29 &   3.00 &    Male &     No &   Sun &  Dinner &     2 \\\\\n46  &       22.23 &   5.00 &    Male &     No &   Sun &  Dinner &     2 \\\\\n47  &       32.40 &   6.00 &    Male &     No &   Sun &  Dinner &     4 \\\\\n48  &       28.55 &   2.05 &    Male &     No &   Sun &  Dinner &     3 \\\\\n49  &       18.04 &   3.00 &    Male &     No &   Sun &  Dinner &     2 \\\\\n50  &       12.54 &   2.50 &    Male &     No &   Sun &  Dinner &     2 \\\\\n51  &       10.29 &   2.60 &  Female &     No &   Sun &  Dinner &     2 \\\\\n52  &       34.81 &   5.20 &  Female &     No &   Sun &  Dinner &     4 \\\\\n53  &        9.94 &   1.56 &    Male &     No &   Sun &  Dinner &     2 \\\\\n54  &       25.56 &   4.34 &    Male &     No &   Sun &  Dinner &     4 \\\\\n55  &       19.49 &   3.51 &    Male &     No &   Sun &  Dinner &     2 \\\\\n56  &       38.01 &   3.00 &    Male &    Yes &   Sat &  Dinner &     4 \\\\\n57  &       26.41 &   1.50 &  Female &     No &   Sat &  Dinner &     2 \\\\\n58  &       11.24 &   1.76 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n59  &       48.27 &   6.73 &    Male &     No &   Sat &  Dinner &     4 \\\\\n60  &       20.29 &   3.21 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n61  &       13.81 &   2.00 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n62  &       11.02 &   1.98 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n63  &       18.29 &   3.76 &    Male &    Yes &   Sat &  Dinner &     4 \\\\\n64  &       17.59 &   2.64 &    Male &     No &   Sat &  Dinner &     3 \\\\\n65  &       20.08 &   3.15 &    Male &     No &   Sat &  Dinner &     3 \\\\\n66  &       16.45 &   2.47 &  Female &     No &   Sat &  Dinner &     2 \\\\\n67  &        3.07 &   1.00 &  Female &    Yes &   Sat &  Dinner &     1 \\\\\n68  &       20.23 &   2.01 &    Male &     No &   Sat &  Dinner &     2 \\\\\n69  &       15.01 &   2.09 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n70  &       12.02 &   1.97 &    Male &     No &   Sat &  Dinner &     2 \\\\\n71  &       17.07 &   3.00 &  Female &     No &   Sat &  Dinner &     3 \\\\\n72  &       26.86 &   3.14 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n73  &       25.28 &   5.00 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n74  &       14.73 &   2.20 &  Female &     No &   Sat &  Dinner &     2 \\\\\n75  &       10.51 &   1.25 &    Male &     No &   Sat &  Dinner &     2 \\\\\n76  &       17.92 &   3.08 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n77  &       27.20 &   4.00 &    Male &     No &  Thur &   Lunch &     4 \\\\\n78  &       22.76 &   3.00 &    Male &     No &  Thur &   Lunch &     2 \\\\\n79  &       17.29 &   2.71 &    Male &     No &  Thur &   Lunch &     2 \\\\\n80  &       19.44 &   3.00 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n81  &       16.66 &   3.40 &    Male &     No &  Thur &   Lunch &     2 \\\\\n82  &       10.07 &   1.83 &  Female &     No &  Thur &   Lunch &     1 \\\\\n83  &       32.68 &   5.00 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n84  &       15.98 &   2.03 &    Male &     No &  Thur &   Lunch &     2 \\\\\n85  &       34.83 &   5.17 &  Female &     No &  Thur &   Lunch &     4 \\\\\n86  &       13.03 &   2.00 &    Male &     No &  Thur &   Lunch &     2 \\\\\n87  &       18.28 &   4.00 &    Male &     No &  Thur &   Lunch &     2 \\\\\n88  &       24.71 &   5.85 &    Male &     No &  Thur &   Lunch &     2 \\\\\n89  &       21.16 &   3.00 &    Male &     No &  Thur &   Lunch &     2 \\\\\n90  &       28.97 &   3.00 &    Male &    Yes &   Fri &  Dinner &     2 \\\\\n91  &       22.49 &   3.50 &    Male &     No &   Fri &  Dinner &     2 \\\\\n92  &        5.75 &   1.00 &  Female &    Yes &   Fri &  Dinner &     2 \\\\\n93  &       16.32 &   4.30 &  Female &    Yes &   Fri &  Dinner &     2 \\\\\n94  &       22.75 &   3.25 &  Female &     No &   Fri &  Dinner &     2 \\\\\n95  &       40.17 &   4.73 &    Male &    Yes &   Fri &  Dinner &     4 \\\\\n96  &       27.28 &   4.00 &    Male &    Yes &   Fri &  Dinner &     2 \\\\\n97  &       12.03 &   1.50 &    Male &    Yes &   Fri &  Dinner &     2 \\\\\n98  &       21.01 &   3.00 &    Male &    Yes &   Fri &  Dinner &     2 \\\\\n99  &       12.46 &   1.50 &    Male &     No &   Fri &  Dinner &     2 \\\\\n100 &       11.35 &   2.50 &  Female &    Yes &   Fri &  Dinner &     2 \\\\\n101 &       15.38 &   3.00 &  Female &    Yes &   Fri &  Dinner &     2 \\\\\n102 &       44.30 &   2.50 &  Female &    Yes &   Sat &  Dinner &     3 \\\\\n103 &       22.42 &   3.48 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n104 &       20.92 &   4.08 &  Female &     No &   Sat &  Dinner &     2 \\\\\n105 &       15.36 &   1.64 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n106 &       20.49 &   4.06 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n107 &       25.21 &   4.29 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n108 &       18.24 &   3.76 &    Male &     No &   Sat &  Dinner &     2 \\\\\n109 &       14.31 &   4.00 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n110 &       14.00 &   3.00 &    Male &     No &   Sat &  Dinner &     2 \\\\\n111 &        7.25 &   1.00 &  Female &     No &   Sat &  Dinner &     1 \\\\\n112 &       38.07 &   4.00 &    Male &     No &   Sun &  Dinner &     3 \\\\\n113 &       23.95 &   2.55 &    Male &     No &   Sun &  Dinner &     2 \\\\\n114 &       25.71 &   4.00 &  Female &     No &   Sun &  Dinner &     3 \\\\\n115 &       17.31 &   3.50 &  Female &     No &   Sun &  Dinner &     2 \\\\\n116 &       29.93 &   5.07 &    Male &     No &   Sun &  Dinner &     4 \\\\\n117 &       10.65 &   1.50 &  Female &     No &  Thur &   Lunch &     2 \\\\\n118 &       12.43 &   1.80 &  Female &     No &  Thur &   Lunch &     2 \\\\\n119 &       24.08 &   2.92 &  Female &     No &  Thur &   Lunch &     4 \\\\\n120 &       11.69 &   2.31 &    Male &     No &  Thur &   Lunch &     2 \\\\\n121 &       13.42 &   1.68 &  Female &     No &  Thur &   Lunch &     2 \\\\\n122 &       14.26 &   2.50 &    Male &     No &  Thur &   Lunch &     2 \\\\\n123 &       15.95 &   2.00 &    Male &     No &  Thur &   Lunch &     2 \\\\\n124 &       12.48 &   2.52 &  Female &     No &  Thur &   Lunch &     2 \\\\\n125 &       29.80 &   4.20 &  Female &     No &  Thur &   Lunch &     6 \\\\\n126 &        8.52 &   1.48 &    Male &     No &  Thur &   Lunch &     2 \\\\\n127 &       14.52 &   2.00 &  Female &     No &  Thur &   Lunch &     2 \\\\\n128 &       11.38 &   2.00 &  Female &     No &  Thur &   Lunch &     2 \\\\\n129 &       22.82 &   2.18 &    Male &     No &  Thur &   Lunch &     3 \\\\\n130 &       19.08 &   1.50 &    Male &     No &  Thur &   Lunch &     2 \\\\\n131 &       20.27 &   2.83 &  Female &     No &  Thur &   Lunch &     2 \\\\\n132 &       11.17 &   1.50 &  Female &     No &  Thur &   Lunch &     2 \\\\\n133 &       12.26 &   2.00 &  Female &     No &  Thur &   Lunch &     2 \\\\\n134 &       18.26 &   3.25 &  Female &     No &  Thur &   Lunch &     2 \\\\\n135 &        8.51 &   1.25 &  Female &     No &  Thur &   Lunch &     2 \\\\\n136 &       10.33 &   2.00 &  Female &     No &  Thur &   Lunch &     2 \\\\\n137 &       14.15 &   2.00 &  Female &     No &  Thur &   Lunch &     2 \\\\\n138 &       16.00 &   2.00 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n139 &       13.16 &   2.75 &  Female &     No &  Thur &   Lunch &     2 \\\\\n140 &       17.47 &   3.50 &  Female &     No &  Thur &   Lunch &     2 \\\\\n141 &       34.30 &   6.70 &    Male &     No &  Thur &   Lunch &     6 \\\\\n142 &       41.19 &   5.00 &    Male &     No &  Thur &   Lunch &     5 \\\\\n143 &       27.05 &   5.00 &  Female &     No &  Thur &   Lunch &     6 \\\\\n144 &       16.43 &   2.30 &  Female &     No &  Thur &   Lunch &     2 \\\\\n145 &        8.35 &   1.50 &  Female &     No &  Thur &   Lunch &     2 \\\\\n146 &       18.64 &   1.36 &  Female &     No &  Thur &   Lunch &     3 \\\\\n147 &       11.87 &   1.63 &  Female &     No &  Thur &   Lunch &     2 \\\\\n148 &        9.78 &   1.73 &    Male &     No &  Thur &   Lunch &     2 \\\\\n149 &        7.51 &   2.00 &    Male &     No &  Thur &   Lunch &     2 \\\\\n150 &       14.07 &   2.50 &    Male &     No &   Sun &  Dinner &     2 \\\\\n151 &       13.13 &   2.00 &    Male &     No &   Sun &  Dinner &     2 \\\\\n152 &       17.26 &   2.74 &    Male &     No &   Sun &  Dinner &     3 \\\\\n153 &       24.55 &   2.00 &    Male &     No &   Sun &  Dinner &     4 \\\\\n154 &       19.77 &   2.00 &    Male &     No &   Sun &  Dinner &     4 \\\\\n155 &       29.85 &   5.14 &  Female &     No &   Sun &  Dinner &     5 \\\\\n156 &       48.17 &   5.00 &    Male &     No &   Sun &  Dinner &     6 \\\\\n157 &       25.00 &   3.75 &  Female &     No &   Sun &  Dinner &     4 \\\\\n158 &       13.39 &   2.61 &  Female &     No &   Sun &  Dinner &     2 \\\\\n159 &       16.49 &   2.00 &    Male &     No &   Sun &  Dinner &     4 \\\\\n160 &       21.50 &   3.50 &    Male &     No &   Sun &  Dinner &     4 \\\\\n161 &       12.66 &   2.50 &    Male &     No &   Sun &  Dinner &     2 \\\\\n162 &       16.21 &   2.00 &  Female &     No &   Sun &  Dinner &     3 \\\\\n163 &       13.81 &   2.00 &    Male &     No &   Sun &  Dinner &     2 \\\\\n164 &       17.51 &   3.00 &  Female &    Yes &   Sun &  Dinner &     2 \\\\\n165 &       24.52 &   3.48 &    Male &     No &   Sun &  Dinner &     3 \\\\\n166 &       20.76 &   2.24 &    Male &     No &   Sun &  Dinner &     2 \\\\\n167 &       31.71 &   4.50 &    Male &     No &   Sun &  Dinner &     4 \\\\\n168 &       10.59 &   1.61 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n169 &       10.63 &   2.00 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n170 &       50.81 &  10.00 &    Male &    Yes &   Sat &  Dinner &     3 \\\\\n171 &       15.81 &   3.16 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n172 &        7.25 &   5.15 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n173 &       31.85 &   3.18 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n174 &       16.82 &   4.00 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n175 &       32.90 &   3.11 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n176 &       17.89 &   2.00 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n177 &       14.48 &   2.00 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n178 &        9.60 &   4.00 &  Female &    Yes &   Sun &  Dinner &     2 \\\\\n179 &       34.63 &   3.55 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n180 &       34.65 &   3.68 &    Male &    Yes &   Sun &  Dinner &     4 \\\\\n181 &       23.33 &   5.65 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n182 &       45.35 &   3.50 &    Male &    Yes &   Sun &  Dinner &     3 \\\\\n183 &       23.17 &   6.50 &    Male &    Yes &   Sun &  Dinner &     4 \\\\\n184 &       40.55 &   3.00 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n185 &       20.69 &   5.00 &    Male &     No &   Sun &  Dinner &     5 \\\\\n186 &       20.90 &   3.50 &  Female &    Yes &   Sun &  Dinner &     3 \\\\\n187 &       30.46 &   2.00 &    Male &    Yes &   Sun &  Dinner &     5 \\\\\n188 &       18.15 &   3.50 &  Female &    Yes &   Sun &  Dinner &     3 \\\\\n189 &       23.10 &   4.00 &    Male &    Yes &   Sun &  Dinner &     3 \\\\\n190 &       15.69 &   1.50 &    Male &    Yes &   Sun &  Dinner &     2 \\\\\n191 &       19.81 &   4.19 &  Female &    Yes &  Thur &   Lunch &     2 \\\\\n192 &       28.44 &   2.56 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n193 &       15.48 &   2.02 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n194 &       16.58 &   4.00 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n195 &        7.56 &   1.44 &    Male &     No &  Thur &   Lunch &     2 \\\\\n196 &       10.34 &   2.00 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n197 &       43.11 &   5.00 &  Female &    Yes &  Thur &   Lunch &     4 \\\\\n198 &       13.00 &   2.00 &  Female &    Yes &  Thur &   Lunch &     2 \\\\\n199 &       13.51 &   2.00 &    Male &    Yes &  Thur &   Lunch &     2 \\\\\n200 &       18.71 &   4.00 &    Male &    Yes &  Thur &   Lunch &     3 \\\\\n201 &       12.74 &   2.01 &  Female &    Yes &  Thur &   Lunch &     2 \\\\\n202 &       13.00 &   2.00 &  Female &    Yes &  Thur &   Lunch &     2 \\\\\n203 &       16.40 &   2.50 &  Female &    Yes &  Thur &   Lunch &     2 \\\\\n204 &       20.53 &   4.00 &    Male &    Yes &  Thur &   Lunch &     4 \\\\\n205 &       16.47 &   3.23 &  Female &    Yes &  Thur &   Lunch &     3 \\\\\n206 &       26.59 &   3.41 &    Male &    Yes &   Sat &  Dinner &     3 \\\\\n207 &       38.73 &   3.00 &    Male &    Yes &   Sat &  Dinner &     4 \\\\\n208 &       24.27 &   2.03 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n209 &       12.76 &   2.23 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n210 &       30.06 &   2.00 &    Male &    Yes &   Sat &  Dinner &     3 \\\\\n211 &       25.89 &   5.16 &    Male &    Yes &   Sat &  Dinner &     4 \\\\\n212 &       48.33 &   9.00 &    Male &     No &   Sat &  Dinner &     4 \\\\\n213 &       13.27 &   2.50 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n214 &       28.17 &   6.50 &  Female &    Yes &   Sat &  Dinner &     3 \\\\\n215 &       12.90 &   1.10 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n216 &       28.15 &   3.00 &    Male &    Yes &   Sat &  Dinner &     5 \\\\\n217 &       11.59 &   1.50 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n218 &        7.74 &   1.44 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n219 &       30.14 &   3.09 &  Female &    Yes &   Sat &  Dinner &     4 \\\\\n220 &       12.16 &   2.20 &    Male &    Yes &   Fri &   Lunch &     2 \\\\\n221 &       13.42 &   3.48 &  Female &    Yes &   Fri &   Lunch &     2 \\\\\n222 &        8.58 &   1.92 &    Male &    Yes &   Fri &   Lunch &     1 \\\\\n223 &       15.98 &   3.00 &  Female &     No &   Fri &   Lunch &     3 \\\\\n224 &       13.42 &   1.58 &    Male &    Yes &   Fri &   Lunch &     2 \\\\\n225 &       16.27 &   2.50 &  Female &    Yes &   Fri &   Lunch &     2 \\\\\n226 &       10.09 &   2.00 &  Female &    Yes &   Fri &   Lunch &     2 \\\\\n227 &       20.45 &   3.00 &    Male &     No &   Sat &  Dinner &     4 \\\\\n228 &       13.28 &   2.72 &    Male &     No &   Sat &  Dinner &     2 \\\\\n229 &       22.12 &   2.88 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n230 &       24.01 &   2.00 &    Male &    Yes &   Sat &  Dinner &     4 \\\\\n231 &       15.69 &   3.00 &    Male &    Yes &   Sat &  Dinner &     3 \\\\\n232 &       11.61 &   3.39 &    Male &     No &   Sat &  Dinner &     2 \\\\\n233 &       10.77 &   1.47 &    Male &     No &   Sat &  Dinner &     2 \\\\\n234 &       15.53 &   3.00 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n235 &       10.07 &   1.25 &    Male &     No &   Sat &  Dinner &     2 \\\\\n236 &       12.60 &   1.00 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n237 &       32.83 &   1.17 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n238 &       35.83 &   4.67 &  Female &     No &   Sat &  Dinner &     3 \\\\\n239 &       29.03 &   5.92 &    Male &     No &   Sat &  Dinner &     3 \\\\\n240 &       27.18 &   2.00 &  Female &    Yes &   Sat &  Dinner &     2 \\\\\n241 &       22.67 &   2.00 &    Male &    Yes &   Sat &  Dinner &     2 \\\\\n242 &       17.82 &   1.75 &    Male &     No &   Sat &  Dinner &     2 \\\\\n243 &       18.78 &   3.00 &  Female &     No &  Thur &  Dinner &     2 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nsns.relplot(data=tips,\n            x=\"total_bill\", y=\"tip\", col=\"time\",\n            hue=\"smoker\", style=\"smoker\", size=\"size\")\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n<seaborn.axisgrid.FacetGrid at 0x1bf97137490>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-32-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\nThe default type of plots for `relplot()` is scatter plots. However you may change it to line plot by setting `kind='line'`.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndots = sns.load_dataset(\"dots\")\nsns.relplot(data=dots, kind=\"line\",\n            x=\"time\", y=\"firing_rate\", col=\"align\",\n            hue=\"choice\", size=\"coherence\", style=\"choice\",\n            facet_kws=dict(sharex=False))\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n<seaborn.axisgrid.FacetGrid at 0x1bf97119150>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-33-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n### `regplot()`\nThis method is a combination between scatter plots and linear regression.\n\n::: {#exm-}\nWe still use `tips` as an example.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nsns.regplot(x='total_bill', y='tip', data=tips)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n<AxesSubplot: xlabel='total_bill', ylabel='tip'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-34-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n### `pairplot()`\nThis is a way to display the pairwise relations among several variables. \n\n::: {#exm-}\nThe following code shows the pairplots among all numeric data in `tips`.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nsns.pairplot(tips, diag_kind='kde', plot_kws={'alpha': 0.2})\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n<seaborn.axisgrid.PairGrid at 0x1bf9f52f880>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-35-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n\n### `barplot`\n\n\n::: {#exm-}\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nsns.barplot(x='total_bill', y='day', data=tips, orient='h')\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n<AxesSubplot: xlabel='total_bill', ylabel='day'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-36-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nIn the plot, there are several `total_bill` during each `day`. The value in the plot is the average of `total_bill` in each `day`, and the black line stands for the `95%` confidence interval.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nsns.barplot(x='total_bill', y='day', hue='time', data=tips, orient='h')\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n<AxesSubplot: xlabel='total_bill', ylabel='day'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-37-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nIn this plot, lunch and dinner are distinguished by colors.\n:::\n\n### Histogram\n\n::: {#exm-}\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\ny = mu-30 + sigma*2 * np.random.randn(10000)\ndf = pd.DataFrame(np.array([x,y]).T)\nsns.histplot(df, bins=100, kde=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n<AxesSubplot: ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-38-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nPlease compare this plot with [this Example](#exm-histogram1)\n:::\n\n\n## Examples\n\n\n### Example 1: `USA.gov` Data From `Bitly`\nIn 2011, URL shortening service `Bitly` partnered with the US government website\n`USA.gov` to provide a feed of anonymous data gathered from users who shorten links\nending with `.gov` or `.mil`. The data is gotten from @McK2017.\n\nThe data file can be downloaded from [here](assests/datasets/example.txt). The file is mostly in JSON. It can be converted into a DataFrame by the following code.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport json\npath = 'assests/datasets/example.txt'\ndf = pd.DataFrame([json.loads(line) for line in open(path)])\n```\n:::\n\n\nWe mainly use `tz` and `a` columns. So let us clean it.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ndf['tz'] = df['tz'].fillna('Missing')\ndf['tz'][df['tz'] == ''] = 'Unknown'\ndf['a'] = df['a'].fillna('Missing')\ndf['a'][df['a'] == ''] = 'Unknown'\n```\n:::\n\n\nWe first want to extract the timezone infomation from it. The timezone info is in the column `tz`.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ntzone = df['tz']\ntvc = tzone.value_counts()\ntvc\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &    tz \\\\\n\\midrule\nAmerica/New\\_York               &  1251 \\\\\nUnknown                        &   521 \\\\\nAmerica/Chicago                &   400 \\\\\nAmerica/Los\\_Angeles            &   382 \\\\\nAmerica/Denver                 &   191 \\\\\nMissing                        &   120 \\\\\nEurope/London                  &    74 \\\\\nAsia/Tokyo                     &    37 \\\\\nPacific/Honolulu               &    36 \\\\\nEurope/Madrid                  &    35 \\\\\nAmerica/Sao\\_Paulo              &    33 \\\\\nEurope/Berlin                  &    28 \\\\\nEurope/Rome                    &    27 \\\\\nAmerica/Rainy\\_River            &    25 \\\\\nEurope/Amsterdam               &    22 \\\\\nAmerica/Indianapolis           &    20 \\\\\nAmerica/Phoenix                &    20 \\\\\nEurope/Warsaw                  &    16 \\\\\nAmerica/Mexico\\_City            &    15 \\\\\nEurope/Stockholm               &    14 \\\\\nEurope/Paris                   &    14 \\\\\nAmerica/Vancouver              &    12 \\\\\nPacific/Auckland               &    11 \\\\\nEurope/Moscow                  &    10 \\\\\nEurope/Helsinki                &    10 \\\\\nEurope/Oslo                    &    10 \\\\\nEurope/Prague                  &    10 \\\\\nAsia/Hong\\_Kong                 &    10 \\\\\nAmerica/Puerto\\_Rico            &    10 \\\\\nAsia/Calcutta                  &     9 \\\\\nAmerica/Montreal               &     9 \\\\\nAsia/Istanbul                  &     9 \\\\\nEurope/Lisbon                  &     8 \\\\\nAmerica/Edmonton               &     6 \\\\\nChile/Continental              &     6 \\\\\nAustralia/NSW                  &     6 \\\\\nEurope/Vienna                  &     6 \\\\\nAsia/Bangkok                   &     6 \\\\\nEurope/Athens                  &     6 \\\\\nAsia/Seoul                     &     5 \\\\\nEurope/Budapest                &     5 \\\\\nAmerica/Anchorage              &     5 \\\\\nEurope/Copenhagen              &     5 \\\\\nAsia/Dubai                     &     4 \\\\\nAsia/Beirut                    &     4 \\\\\nAmerica/Halifax                &     4 \\\\\nEurope/Zurich                  &     4 \\\\\nEurope/Bucharest               &     4 \\\\\nEurope/Brussels                &     4 \\\\\nAmerica/Winnipeg               &     4 \\\\\nAsia/Jakarta                   &     3 \\\\\nAsia/Harbin                    &     3 \\\\\nAmerica/Managua                &     3 \\\\\nAfrica/Cairo                   &     3 \\\\\nEurope/Dublin                  &     3 \\\\\nAsia/Jerusalem                 &     3 \\\\\nEurope/Bratislava              &     3 \\\\\nAsia/Kuala\\_Lumpur              &     3 \\\\\nAmerica/Bogota                 &     3 \\\\\nAsia/Karachi                   &     3 \\\\\nEurope/Malta                   &     2 \\\\\nAmerica/Guayaquil              &     2 \\\\\nAsia/Amman                     &     2 \\\\\nAmerica/Chihuahua              &     2 \\\\\nEurope/Belgrade                &     2 \\\\\nEurope/Riga                    &     2 \\\\\nAmerica/Recife                 &     2 \\\\\nAfrica/Ceuta                   &     2 \\\\\nEurope/Vilnius                 &     2 \\\\\nEurope/Volgograd               &     1 \\\\\nAsia/Kuching                   &     1 \\\\\nAmerica/Argentina/Cordoba      &     1 \\\\\nAmerica/Santo\\_Domingo          &     1 \\\\\nAmerica/La\\_Paz                 &     1 \\\\\nAmerica/St\\_Kitts               &     1 \\\\\nAfrica/Johannesburg            &     1 \\\\\nAfrica/Casablanca              &     1 \\\\\nAsia/Nicosia                   &     1 \\\\\nAfrica/Lusaka                  &     1 \\\\\nEurope/Ljubljana               &     1 \\\\\nAsia/Pontianak                 &     1 \\\\\nAmerica/Lima                   &     1 \\\\\nAsia/Novosibirsk               &     1 \\\\\nEurope/Skopje                  &     1 \\\\\nAmerica/Monterrey              &     1 \\\\\nAmerica/Argentina/Buenos\\_Aires &     1 \\\\\nAsia/Yekaterinburg             &     1 \\\\\nAsia/Manila                    &     1 \\\\\nAmerica/Caracas                &     1 \\\\\nAsia/Riyadh                    &     1 \\\\\nAmerica/Montevideo             &     1 \\\\\nAmerica/Argentina/Mendoza      &     1 \\\\\nAmerica/Mazatlan               &     1 \\\\\nEurope/Uzhgorod                &     1 \\\\\nAustralia/Queensland           &     1 \\\\\nEurope/Sofia                   &     1 \\\\\nAmerica/Costa\\_Rica             &     1 \\\\\nAmerica/Tegucigalpa            &     1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nAfter cleaning data, we would like to visulize the value counts.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nimport seaborn as sns\nsns.barplot(x=tvc[:10].values, y=tvc[:10].index)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-42-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe then would like to extract information from the column `a`. This column is about the agent of the connection. The important info is the part before the space `' '`.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nagent = df['a']\nagent = agent.str.split(' ').str[0]\navc = agent.value_counts()\navc[:10]\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &     a \\\\\n\\midrule\nMozilla/5.0              &  2594 \\\\\nMozilla/4.0              &   601 \\\\\nGoogleMaps/RochesterNY   &   121 \\\\\nMissing                  &   120 \\\\\nOpera/9.80               &    34 \\\\\nTEST\\_INTERNET\\_AGENT      &    24 \\\\\nGoogleProducer           &    21 \\\\\nMozilla/6.0              &     5 \\\\\nBlackBerry8520/5.0.0.681 &     4 \\\\\nBlackBerry8520/5.0.0.592 &     3 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nNow let us assume that, if `Windows` appears in column `a` the user is using `Windows` os, if not then not. In this case, the os can be detected by the following code.\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ndf['os'] = np.where(df['a'].str.contains('Windows'), 'Windows', 'Not Windows')\n```\n:::\n\n\nNow we can make a bar plot about the counts based on `os` and `timezone`.\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ntz_os_counts = df.groupby(['tz', 'os']).size().unstack().fillna(0)\ntz_os_counts.head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=tex}\n\\begin{tabular}{lrr}\n\\toprule\nos &  Not Windows &  Windows \\\\\ntz                  &              &          \\\\\n\\midrule\nAfrica/Cairo        &          0.0 &      3.0 \\\\\nAfrica/Casablanca   &          0.0 &      1.0 \\\\\nAfrica/Ceuta        &          0.0 &      2.0 \\\\\nAfrica/Johannesburg &          0.0 &      1.0 \\\\\nAfrica/Lusaka       &          0.0 &      1.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nWe then turn it into a DataFrame using the `.stack()`, `.unstack()` tricks.\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ntovc = tz_os_counts.stack()[tz_os_counts.sum(axis=1).nlargest(10).index]\ntovc.name = 'count'\ndftovc = pd.DataFrame(tovc).reset_index()\n```\n:::\n\n\nFinally we may draw the bar plot.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nsns.barplot(x='count', y='tz', hue='os', data=dftovc)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n<AxesSubplot: xlabel='count', ylabel='tz'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-47-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Example 2: US Baby Names 1880–2010\nThe United States Social Security Administration (SSA) has made available data on the frequency of baby names from 1880 through the present. Hadley Wickham, an author of several popular R packages, has often made use of this dataset in illustrating data manipulation in `R`. The dataset can be downloaded from [here](assests/datasets/babynames.zip) as a zip file. Please unzip it and put it in your working folder.\n\nIn the folder there are 131 `.txt` files. The naming scheme is `yob` + the year. Each file contains 3 columns: `name`, `gender`, and `counts`. We would like to add a column `year`, and combine all files into a single DataFrame. In our example, the year is from 1880 to 2010.\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nimport pandas as pd\n\npath = 'assests/datasets/babynames/'\ndflist = list()\nfor year in range(1880, 2011):\n    filename = path + 'yob' + str(year) + '.txt'\n    df = pd.read_csv(filename, names=['name', 'gender', 'counts'])\n    df['year'] = year\n    dflist.append(df)\ndf = pd.concat(dflist, ignore_index=True)\n```\n:::\n\n\nWe can plot the total births by sex and year.\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nimport seaborn as sns\n\nsns.relplot(data=df.groupby(['gender', 'year']).sum().reset_index(),\n            x='year', y='counts', hue='gender', kind='line')\n```\n:::\n\n\n::: {.cell execution_count=49}\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n<seaborn.axisgrid.FacetGrid at 0x1bfa1464f70>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-50-output-2.pdf){}\n:::\n:::\n\n\nFor further analysis, we would like to compute the proportions of each name relative to the total number of births per year per gender. \n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\ndef add_prop(group):\n    group['prop'] = group.counts / group.counts.sum()\n    return group\n\ndf = df.groupby(['gender', 'year']).apply(add_prop)\ndf.head()\n```\n:::\n\n\n::: {.cell execution_count=51}\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=tex}\n\\begin{tabular}{lllrrr}\n\\toprule\n{} &       name & gender &  counts &  year &      prop \\\\\n\\midrule\n0 &       Mary &      F &    7065 &  1880 &  0.077643 \\\\\n1 &       Anna &      F &    2604 &  1880 &  0.028618 \\\\\n2 &       Emma &      F &    2003 &  1880 &  0.022013 \\\\\n3 &  Elizabeth &      F &    1939 &  1880 &  0.021309 \\\\\n4 &     Minnie &      F &    1746 &  1880 &  0.019188 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nNow we would like to keep the first 100 names in each year, and save it as a new DataFrame `top100`.\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\ntop100 = (\n    df.groupby(['year', 'gender'])\n    .apply(lambda x: df.loc[x['counts'].nlargest(100).index])\n    .drop(columns=['year', 'gender'])\n    .reset_index()\n    .drop(columns='level_2')\n)\ntop100.head()\n```\n:::\n\n\n::: {.cell execution_count=53}\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=tex}\n\\begin{tabular}{lrllrr}\n\\toprule\n{} &  year & gender &       name &  counts &      prop \\\\\n\\midrule\n0 &  1880 &      F &       Mary &    7065 &  0.077643 \\\\\n1 &  1880 &      F &       Anna &    2604 &  0.028618 \\\\\n2 &  1880 &      F &       Emma &    2003 &  0.022013 \\\\\n3 &  1880 &      F &  Elizabeth &    1939 &  0.021309 \\\\\n4 &  1880 &      F &     Minnie &    1746 &  0.019188 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nNote that `level_2` is related to the original index after `reset_index()`. That's why we don't need it here.\n\nNow we would like to draw the trend of some names.\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nnamelist = ['John', 'Harry', 'Mary']\nsns.relplot(data=top100[top100['name'].isin(namelist)],\n            x='year', y='counts', hue='name', kind='line')\n```\n:::\n\n\n::: {.cell execution_count=55}\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n<seaborn.axisgrid.FacetGrid at 0x1bfa1464160>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-56-output-2.pdf){}\n:::\n:::\n\n\nNow we would like to analyze the ending of names.\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\ndf['ending'] = df['name'].str[-1]\nendingcount = df.groupby(['gender', 'year', 'ending']).sum().reset_index()\n```\n:::\n\n\nWe would like to draw barplots to show the distributions in year 1910, 1960 and 2010.\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\ncertainyear = endingcount[endingcount['year'].isin([1910, 1960, 2010])]\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(2, 1, figsize=(10,7))\nsns.barplot(data=certainyear[endingcount['gender']=='M'],\n            x='ending', y='prop', hue='year', ax=axs[0])\nsns.barplot(data=certainyear[endingcount['gender']=='F'],\n            x='ending', y='prop', hue='year', ax=axs[1]).legend_.remove()\n```\n:::\n\n\n::: {.cell execution_count=58}\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-59-output-1.pdf){}\n:::\n:::\n\n\nWe would also like to draw the line plot to show the trending of certain letters through years.\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nsns.relplot(data=endingcount[endingcount.ending.isin(['d', 'n', 'y'])],\n            x='year', y='prop', hue='ending', kind='line')\n```\n:::\n\n\n::: {.cell execution_count=60}\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n<seaborn.axisgrid.FacetGrid at 0x1bfa18b3e80>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05-_files/figure-pdf/cell-61-output-2.pdf){}\n:::\n:::\n\n\n## Exercises\n\n\n\n::: {#exr-}\nPlease download the `mtcars` file from [here](assests/datasets/mtcars.csv) and read it as a DataFrame. Then create a scatter plot of the `drat` and `wt` variables from `mtcars` and color the dots by the `carb` variable. \n:::\n\n\n::: {#exr-}\nPlease consider the baby name dataset. Please draw the trends of counts of names ending in `a`, `e`, `n` across years for each gender.\n:::\n\n## Projects\n\n\n\n::: {#exr-}\nPlease read the file as a DataFrame from [here](assests/datasets/QSR.csv). This is the Dining satisfaction with quick service restaurants questionare data provided by Dr. Siri McDowall, supported by DART SEED grant.\n\n1. Please pick out all rating columns. Excluding `last.visit`, `visit.again` and `recommend`, compute the mean of the rest and add it to the DataFrame as a new column.\n2. Use a plot to show the relations among these four columns:  `last.visit`, `visit.again`, `recommend` and `mean`.\n3. Look at the column `Profession`. Keep `Student`, and change everything else to be `Professional`, and add it as a new column `Status` to the DataFrame.\n4. Draw the histogram of `mean` with respect to `Status`.\n5. Find the counts of each `recommend` rating for each `Status` and draw the barplot. Do the same to `last.visit`/`Status` and `visit.again`/`Status`.\n6. Exploer the dataset and draw one plot.\n:::\n\n\n\n::: {#exr-}\nPlease use the baby name dataset. We would like to consider the diversity of the names. Please compute the number of popular names in top 50% for each year each gender. Draw a line plot to show the trend and discuss the result.\n:::\n\n",
    "supporting": [
      "05-_files\\figure-pdf"
    ],
    "filters": []
  }
}