{
  "hash": "6cefa18e48a90dad4e5705ce4cf0c5a6",
  "result": {
    "markdown": "# Package: `pandas`\nThe basic data structure for `pandas` is `pandas.DataFrame`. You may treat it as a generalized version of tables.\n\nTo use `pandas`, we just import it. In most cases you would like to use the alias `pd`.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nSince `DataFrame` is more like a table, the biggest questions here is not to do computations (which is still very important), but to retrieve, search, sort, merge, etc.. those data. \n\n\n\n\n\n\n\n\n## Basic `pandas`\n\n###  `Series` and `DataFrame`\nA *Series* is a 1-d array-like object which has index. The default index is starting from `0`. You may change the index to be something assigned by you. Thus it can be treated as a generalization of a `dict`.\n\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nobj = pd.Series([3, 1, 2, 4])\nobj\n```\n\n::: {.cell-output .cell-output-display execution_count=396}\n```\n0    3\n1    1\n2    2\n3    4\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nobj2 = pd.Series([3, 1, 2, 4], index=['a', 'b', 'c', 'd'])\nobj2\n```\n\n::: {.cell-output .cell-output-display execution_count=397}\n```\na    3\nb    1\nc    2\nd    4\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndata3 = {'a': 3, 'b': 1, 'c': 2, 'd': 4}\nobj3 = pd.Series(data3)\nobj3\n```\n\n::: {.cell-output .cell-output-display execution_count=398}\n```\na    3\nb    1\nc    2\nd    4\ndtype: int64\n```\n:::\n:::\n\n\nA *DataFrame* represents a rectangular table of data and contains an ordered collection of columns, each of which can be a different value type. The DataFrame has both a row and column index; it can be thought of as a dict of Series all sharing the same index. When displaying a DataFrame, we may use `.head()` to just display the first few rows for efficicy. \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\n\ndata = {'a': [1, 2, 3, 4, 5, 6, 7],\n        'b': [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1],\n        'c': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}\ndf = pd.DataFrame(data)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=399}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1.1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2.1</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>3.1</td>\n      <td>c</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>4.1</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>5.1</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Decorations\nA `Series` or a `DataFrame` might have named row indexes and column names. I collect some tools for you to play with them and list them below.\n\n\n::: {.callout-note collapse=\"true\"}\n# Setting when creating\nWe may use the setting `columns=` or `index=` to change the column names and the index names. See the following example.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=400}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>one</th>\n      <th>two</th>\n      <th>three</th>\n      <th>four</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Ohio</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Colorado</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Utah</th>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n# `.rename()`\nWe may use the `.rename()` method. Note that by default the return value of this method is a copy and it won't affect the original `DataFrame`. The arguments can be in many different formats. Please see [the official document](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) for more details.\n\nIf you want to directly make the change, please use the argument `inplace=True`.\n\nThe following example shows the standard way to rename.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf = pd.DataFrame(np.arange(16).reshape((4, 4)))\ndf.rename(columns={0: 'zero'}, index={2: 'two'})\n```\n\n::: {.cell-output .cell-output-display execution_count=401}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zero</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHowever the orginal `df` is not affected.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=402}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf you would like to change the original `df`, you may either set `df = df.rename(columns={0: 'zero'}, index={2: 'two'})`, or \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf.rename(columns={0: 'zero'}, index={2: 'two'}, inplace=True)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=403}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zero</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n# Set a column to be the index by `.set_index()`\n\nThe title is all. A few remarks:\n\n1. You may set multiple columns to be the index. In this case, what you get is a multi-index system (which is also called Hierarchical indexing). We will talk about this later in @sec-hierindexing.\n2. The argument `drop` is used to control whether the column is deleted after you set it to be the index. The default setting is `True`.\n3. The argument `append` is used to control whether the column you choose is appended to the exsiting index to form a multi-index system. The default is `False`.\n4. The argument `inplace` is used to control whether you want to make the change inplace. The default is `False`.\n\n:::\n\n\n\n## Indexing\nThe act of selecting rows or columns to access from a dataframe or series is called *indexing*. There are many different ways to index in `pandas`. We will only cover the most popular ones.\n\n\n::: {.callout-caution collapse=\"true\"}\nThere is the same copy and view issue with `pandas` as in `numpy`. However it is more complicated and more inconsistent. Please check the official documents for more details and do more experiments before implementing the codes. Usually if your code is ambiguous, you might see the infamous `SettingWithCopyWarning` warning.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\ndf[df['a']==3]['b'] = 3\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_25936\\4018622545.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df[df['a']==3]['b'] = 3\n```\n:::\n:::\n\n\nNote that `pandas` is testing a `copy-on-write` feature to fix the issue. The feature can be simlified as \"any `DataFrame` or `Series` derived from another in any way always behaves as a copy\". Please keep an eye on the updates about when the feature will be fully implemented in `pandas`.\n:::\n\n\n### `[]`\n\n::: {.callout-note collapse=true}\n## `Series[]`\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=405}\nInput value type          Return Value Type\n------------------------  --------------------------------------------\n`Series[label]`           scalar value\n`Series[list of labels]`  `Series` corresponding to labels\n`Series[slice]`           `Series` corresponding to the slice\n`Series[boolean vector]`  `Series` corresponding to the boolean vector\n:::\n:::\n\n\n1. For `Series`, values are accessed by labels, not positions. Since `Series` are usually considered as a column, you may think these labels as row indexes. \n\n2. When using slice, things becomes more complicated. There are two ways of using slice. You may either slice by positions, or slice by labels. The main differences between them is that:\n\n- slice by positions `Series[i:j]` doesn't contain the last index `Series[j]`;\n- slice by labels `Sereies[I:J]` contains the last label `Series[J]`.\n\n3. Sometimes the labels of a series are integers, but different than the position indexes. In `pandas 1.5.1`, slice by positions takes priority. However the whole scenario is very confusing, and this will be changed in future versions. In this cases it is recommanded to use `.loc` and `.iloc`.  \n\n4. When indexing using boolean vector, the vector should be of the same length as the `Series`. In other words, it works as the boolean bector shows which row is selected.\n\nSee some examples below.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport pandas as pd\n\nexample = pd.Series({'a': 1.1, 'b': 2.2, 'c': 3.3, 'd': 4.4})\nexample\n```\n\n::: {.cell-output .cell-output-display execution_count=406}\n```\na    1.1\nb    2.2\nc    3.3\nd    4.4\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nexample['b']\n```\n\n::: {.cell-output .cell-output-display execution_count=407}\n```\n2.2\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nexample[['b', 'a']]\n```\n\n::: {.cell-output .cell-output-display execution_count=408}\n```\nb    2.2\na    1.1\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nexample[0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=409}\n```\na    1.1\nb    2.2\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nexample['a':'c']\n```\n\n::: {.cell-output .cell-output-display execution_count=410}\n```\na    1.1\nb    2.2\nc    3.3\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nexample[[True, False, True, False]]\n```\n\n::: {.cell-output .cell-output-display execution_count=411}\n```\na    1.1\nc    3.3\ndtype: float64\n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n::: {.callout-note collapse=true}\n## `DataFrame[]`\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=412}\nInput value type               Return Value Type\n-----------------------------  ----------------------------------------------------\n`DataFrame[colname]`           The column corresponding to colname as a `Series`\n`DataFrame[list-of-colnames]`  The columns of `DataFrame` corresponding to colnames\n`DataFrame[slice]`             The rows of `DataFrame` corresponding to the slice\n`DataFrame[boolean list]`      `DataFrame` corresponding to the boolean list\n:::\n:::\n\n\n1. Slice for `DataFrame` behaves exactly like slice for `Series`, that it is selecting rows, and it works for both labels and positions. Similarly, slicing by positions are not recommended and might be deprecated in the future. \n2. On the other hand side, selecting rows are usually related to querying. Therefore it is better not to focus on slicing.\n3. Inside `[]`, one column name and a list of columna names will result totally different objects: one is a `Series` and the other is a `DataFrame`. \n4. In prior versions, using `[list-of-colnames]` would work as long as *at least* 1 of the keys was found (otherwise it would raise a `KeyError`). This behavior was changed and will now raise a `KeyError` if at least one label is missing. The recommended alternative is to use `.reindex()`.\n5. When indexing using boolean vector, the vector should be of the same length as the number of rows of the `DataFrame`. In other words, it works as the boolean bector shows which row is selected.\n6. Using `[]` for `DataFrame` cannot give you a single value, since what are inside `[]` is always treated as a row index or a column index. If you want to get access to the value of a single cell by both row index and column index, use other method like `.loc[]`.\n7. If the column name is eligible for attributes, you may also use `df.a` to represent `df['a']` for simplicity.\n\n::: {#exm-}\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nimport pandas as pd\n\nexample = pd.DataFrame({'a': [1.1, 2.2], 'b': [2.2, 3.3], 'c': [3.3, 4.4]})\nexample\n```\n\n::: {.cell-output .cell-output-display execution_count=413}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.1</td>\n      <td>2.2</td>\n      <td>3.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.2</td>\n      <td>3.3</td>\n      <td>4.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nexample['a']\n```\n\n::: {.cell-output .cell-output-display execution_count=414}\n```\n0    1.1\n1    2.2\nName: a, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nexample.a\n```\n\n::: {.cell-output .cell-output-display execution_count=415}\n```\n0    1.1\n1    2.2\nName: a, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nexample[['a']]\n```\n\n::: {.cell-output .cell-output-display execution_count=416}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nexample[0:1]\n```\n\n::: {.cell-output .cell-output-display execution_count=417}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.1</td>\n      <td>2.2</td>\n      <td>3.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nexample[[False, True]]\n```\n\n::: {.cell-output .cell-output-display execution_count=418}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2.2</td>\n      <td>3.3</td>\n      <td>4.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n\n\n\n### `.loc[]` and `.iloc[]`\n\n`[]` contains several different types of ways to access data. `.loc[]` and `.iloc[]` are more specific. \n\n- `.loc[]` is to use labels to access data.\n- `.iloc[]` is to use positions to access data.\n\n\n:::{.callout-note collapse=true}\n## Notes for `.loc[]` and `.iloc[]`\n\n1. When there is only one index is specified, it is refered to rows. \n2. When using both indexes, the first is row index and the second is column index.\n3. When selecting all rows/columns, you may put `:` in the corresponding place.\n4. `df.loc[1, 'a']` refers to the cell in the DataFrame `df` whose row index is `1` and column index is `a`. `df[1, 'a']` refers to the column in the DataFrame `df` whose column name is `(1, 'a')`.\n5. Many other small details are very similar to `[]`. For example, pay attention to the differences between `df.loc[:, 'a']` and `df.loc[:, ['a']]`.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nimport pandas as pd\nexample = pd.DataFrame({'a': [1.1, 2.2], 'b': [2.2, 3.3], 'c': [3.3, 4.4]})\nexample\n```\n\n::: {.cell-output .cell-output-display execution_count=419}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.1</td>\n      <td>2.2</td>\n      <td>3.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.2</td>\n      <td>3.3</td>\n      <td>4.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nexample.loc[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=420}\n```\na    2.2\nb    3.3\nc    4.4\nName: 1, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nexample.loc[:, 'a']\n```\n\n::: {.cell-output .cell-output-display execution_count=421}\n```\n0    1.1\n1    2.2\nName: a, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nexample.loc[1, 'a']\n```\n\n::: {.cell-output .cell-output-display execution_count=422}\n```\n2.2\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nexample.iloc[0:1, 0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=423}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.1</td>\n      <td>2.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nexample.iloc[1, 0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=424}\n```\na    2.2\nb    3.3\nName: 1, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nexample.iloc[[1], 0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=425}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2.2</td>\n      <td>3.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n\n\n\n\n### Boolean indexing\nLet `df` be a `DataFrame`. Assume that `boo` is boolean vector of the dimension same to the number of rows of `df`, then we can use `df[boo]` to filter data: all rows with `True` will be selected. The syntax is similar to the boolean indexing in `numpy`.\n\n\n::: {.callout-note collapse=\"true\"}\n# The basic usage of boolean indexing\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(8, 4),\n                  index=pd.date_range('1/1/2023', periods=8),\n                  columns=['A', 'B', 'C', 'D'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=426}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-01</th>\n      <td>0.087854</td>\n      <td>-1.114128</td>\n      <td>-2.150084</td>\n      <td>1.928459</td>\n    </tr>\n    <tr>\n      <th>2023-01-02</th>\n      <td>0.417477</td>\n      <td>-0.901888</td>\n      <td>1.313785</td>\n      <td>0.230801</td>\n    </tr>\n    <tr>\n      <th>2023-01-03</th>\n      <td>0.372529</td>\n      <td>-1.237723</td>\n      <td>-0.559997</td>\n      <td>-1.319069</td>\n    </tr>\n    <tr>\n      <th>2023-01-04</th>\n      <td>-0.570812</td>\n      <td>-0.515319</td>\n      <td>0.301034</td>\n      <td>-0.747605</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>1.641893</td>\n      <td>0.231943</td>\n      <td>-0.192106</td>\n      <td>-1.089313</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>-0.836189</td>\n      <td>-0.042600</td>\n      <td>-0.188116</td>\n      <td>-0.644643</td>\n    </tr>\n    <tr>\n      <th>2023-01-07</th>\n      <td>1.031768</td>\n      <td>1.372578</td>\n      <td>2.751513</td>\n      <td>1.058402</td>\n    </tr>\n    <tr>\n      <th>2023-01-08</th>\n      <td>1.440580</td>\n      <td>0.153506</td>\n      <td>-0.418787</td>\n      <td>0.271384</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ndf[df['A']>0]\n```\n\n::: {.cell-output .cell-output-display execution_count=427}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-01</th>\n      <td>0.087854</td>\n      <td>-1.114128</td>\n      <td>-2.150084</td>\n      <td>1.928459</td>\n    </tr>\n    <tr>\n      <th>2023-01-02</th>\n      <td>0.417477</td>\n      <td>-0.901888</td>\n      <td>1.313785</td>\n      <td>0.230801</td>\n    </tr>\n    <tr>\n      <th>2023-01-03</th>\n      <td>0.372529</td>\n      <td>-1.237723</td>\n      <td>-0.559997</td>\n      <td>-1.319069</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>1.641893</td>\n      <td>0.231943</td>\n      <td>-0.192106</td>\n      <td>-1.089313</td>\n    </tr>\n    <tr>\n      <th>2023-01-07</th>\n      <td>1.031768</td>\n      <td>1.372578</td>\n      <td>2.751513</td>\n      <td>1.058402</td>\n    </tr>\n    <tr>\n      <th>2023-01-08</th>\n      <td>1.440580</td>\n      <td>0.153506</td>\n      <td>-0.418787</td>\n      <td>0.271384</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo get the boolean vector, we may directly compute logic expression using columns of `df`. The previous example is of this kind.\n\nYou may write complicated expressions. The operators are:\n\n- `|` for or\n- `&` for and\n- `~` for not\n\nNote that parentheses **must** be used to ensure a correct result. Please see the following example.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndf[(df['A'] > 1) & (df['B'] < 3)]\n```\n\n::: {.cell-output .cell-output-display execution_count=428}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-05</th>\n      <td>1.641893</td>\n      <td>0.231943</td>\n      <td>-0.192106</td>\n      <td>-1.089313</td>\n    </tr>\n    <tr>\n      <th>2023-01-07</th>\n      <td>1.031768</td>\n      <td>1.372578</td>\n      <td>2.751513</td>\n      <td>1.058402</td>\n    </tr>\n    <tr>\n      <th>2023-01-08</th>\n      <td>1.440580</td>\n      <td>0.153506</td>\n      <td>-0.418787</td>\n      <td>0.271384</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n<!-- One method that is usually use is `.isin()` method. This is used to check whether the entry of the `Series` belongs to a `list`. -->\n\nThere are many methods and functions that can create boolean vectors. We will introduce them when we need them.\n\n\n\n### `.query()`\n`DataFrame` has a `.query()` method that allows filtering using an expression instead of a boolean vector. This method uses a different approach from the point of programming language. From the point of users, you are free to choose between `.query()` and boolean indexing to filter data.\n\n\n::: {.callout-note collapse=\"true\"}\n# Here are examples of `.query()`.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ndf = pd.DataFrame({'A': [1,2,3], 'B': [3,2,1], 'C': [5,4,3]})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=429}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ndf.query('A<B and B<C')\n```\n\n::: {.cell-output .cell-output-display execution_count=430}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt can be simplified as follows:\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndf.query('A<B<C')\n```\n\n::: {.cell-output .cell-output-display execution_count=431}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis is the same as the following code.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ndf[(df['A']<df['B']) & (df['B']<df['C'])]\n```\n\n::: {.cell-output .cell-output-display execution_count=432}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that `.query()` does not require the usage of parentheses. It also use English like `or`/`and`/`not` for `|`/`&`/`~`.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndf.query('A in C')\n```\n\n::: {.cell-output .cell-output-display execution_count=433}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ndf.query('A not in C')\n```\n\n::: {.cell-output .cell-output-display execution_count=434}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\ndf.query('A not in C and A<B')\n```\n\n::: {.cell-output .cell-output-display execution_count=435}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ndf.query('[1,2] in B')\n```\n\n::: {.cell-output .cell-output-display execution_count=436}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n### Reindex\n\n`.reindex()` is a data alignment method in `pandas`. To reindex means to conform the data to match a given set of labels along a particular axis. This accomplishes several things:\n\n- Reordering the existing data to match a new set of labels\n- Inserting missing value (`NaN`) markers in label locations where no data for that label existed\n\nHere is a simple example:\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nimport pandas as pd\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=437}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>one</th>\n      <th>two</th>\n      <th>three</th>\n      <th>four</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Ohio</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Colorado</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Utah</th>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndata.reindex(index = ['Colorado', 'Arkansas', 'New York'],\n             columns = ['three', 'five', 'one'])\n```\n\n::: {.cell-output .cell-output-display execution_count=438}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>three</th>\n      <th>five</th>\n      <th>one</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Colorado</th>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Arkansas</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>14.0</td>\n      <td>NaN</td>\n      <td>12.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom the first glance, `.reindex()` behave the same as other indexing methods. Here are a few differences:\n\n- The purpose of indexing methods is to select/filter data, while the purpose of reindex is to make the data in a very specific form.\n- When dealing with non-existent indexes/columns, most other indexing methods will return error or warning, while `.reindex()` can handle it automatically.\n- The default setting of `.reindex()` is to return a copy. This setting can be changed by the argument `copy=False`. \n\nFor more details please see the [official guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#reindexing). \n\n\n\n\n\n\n\n\n<!-- \n\n- Series indexing `(obj[...])` works analogously to NumPy array indexing, except you\ncan use the Series’s index values instead of only integers. \n\n\n\n\n\n- We can use logical expresssion to filter DataFrame.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nimport pandas as pd\n\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata[data['one']>5]\n```\n\n::: {.cell-output .cell-output-display execution_count=439}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>one</th>\n      <th>two</th>\n      <th>three</th>\n      <th>four</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Utah</th>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- `.loc`, `.iloc`\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nimport pandas as pd\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\nprint(data.loc['Colorado', ['two', 'three']])\nprint(data.iloc[2, [3, 0, 1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntwo      5\nthree    6\nName: Colorado, dtype: int32\nfour    11\none      8\ntwo      9\nName: Utah, dtype: int32\n```\n:::\n:::\n\n\n- Slicing with labels behaves differently than normal Python slicing in that the endpoint is inclusive. \n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nimport pandas as pd\n\nobj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])\nobj['b':'c']\n```\n\n::: {.cell-output .cell-output-display execution_count=441}\n```\nb    1.0\nc    2.0\ndtype: float64\n```\n:::\n:::\n\n\n- Reindex `.reindex()`:\n\n\n::: {.callout-note}\n:::\n -->\n\n\n\n\n\n### Updating data\n- Assign values to a column of a DataFrame will update that column. If the column doesn't exist, new column will be created. This is called *enlargement*. \n- When assign values with non-existent row index, that part of the data will be discarded. \n- When using `.loc`, a `DataFrame` can be enlarged on either axis.\n- Any time if there are no values with a specific column and row, it will show as `NaN`. \n<!-- - When locating data using indexes, duplicate labels will return all results. -->\n\n::: {#exm-}\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nimport pandas as pd\n\ndata = {'a': [1, 2, 3, 4],\n        'b': [1.1, 2.1, 3.1, 4.1],\n        'c': ['a', 'b', 'c', 'd']}\ndf = pd.DataFrame(data)\n\nnewcol = {1: 'good', 3: 'better', 5: 'best'}\ndf['d'] = pd.Series(newcol)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=442}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n      <th>d</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1.1</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2.1</td>\n      <td>b</td>\n      <td>good</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>3.1</td>\n      <td>c</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>4.1</td>\n      <td>d</td>\n      <td>better</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n\n## Data cleaning\n\n### Handling Missing Data\n\n- `np.nan`, `pd.NA`\n- `pd.isnull()`, `np.isnan()`\n- `dropna`, `fillna`\n\n\n::: {#exm-}\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame([[1., 6.5, 3.], [1., np.nan, np.nan], \n                     [np.nan, np.nan, np.nan], [np.nan, 6.5, 3.]])\ncleaned = data.dropna()\ncleanedrow = data.dropna(how='all')\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=443}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\ncleaned\n```\n\n::: {.cell-output .cell-output-display execution_count=444}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\ncleanedrow\n```\n\n::: {.cell-output .cell-output-display execution_count=445}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\ndata[4] = np.nan\ncleaned1 = data.dropna(axis=1, how='all')\ncleanedthresh = data.dropna(thresh=2)\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=446}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\ncleaned1\n```\n\n::: {.cell-output .cell-output-display execution_count=447}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\ncleanedthresh\n```\n\n::: {.cell-output .cell-output-display execution_count=448}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nfill0 = data.fillna(0)\nfilldict = data.fillna({1: 0.5, 2: -0.1})\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=449}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nfill0\n```\n\n::: {.cell-output .cell-output-display execution_count=450}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nfilldict\n```\n\n::: {.cell-output .cell-output-display execution_count=451}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>-0.1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>0.5</td>\n      <td>-0.1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n### Data Transformation\n\n- `.duplicated()`, `drop_duplicates()`\n\n\n::: {#exm-}\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({'k1': ['one', 'two'] * 3 + ['two'], \n                     'k2': [1, 1, 2, 3, 3, 4, 4]})\ndata.drop_duplicates(['k1'], keep='last')\n```\n\n::: {.cell-output .cell-output-display execution_count=452}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>k1</th>\n      <th>k2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>one</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>two</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n- `pd.Series.map()`, `pd.DataFrame.apply()`\n\n\n::: {#exm-}\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'food': ['bacon', 'pulled pork', 'bacon',\n                     'Pastrami', 'corned beef', 'Bacon',\n                     'pastrami', 'honey ham', 'nova lox'],\n                     'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})\n\nmeat_to_animal = {\n    'bacon': 'pig',\n    'pulled pork': 'pig',\n    'pastrami': 'cow',\n    'corned beef': 'cow',\n    'honey ham': 'pig',\n    'nova lox': 'salmon'\n    }\n\ndata['animal'] = data['food'].str.lower().map(meat_to_animal)\n\ndata['food'].map(lambda x: meat_to_animal[x.lower()])\n```\n\n::: {.cell-output .cell-output-display execution_count=453}\n```\n0       pig\n1       pig\n2       pig\n3       cow\n4       cow\n5       pig\n6       cow\n7       pig\n8    salmon\nName: food, dtype: object\n```\n:::\n:::\n\n\n:::\n\n- `replace`\n- `rename`\n<!-- - `pd.cut(ages, bins)` -->\n- `describe`\n- `permutation`\n- `sample`\n- dummy variables\n\n### Example: Movies\n\nBelow we explore the MovieLens 1M datasets. You may download it from this [link](assests/datasets/movies.dat). \n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nmnames = ['movie_id', 'title', 'genres']\nmovies = pd.read_table('assests/datasets/movies.dat', sep='::',\n                       header=None, names=mnames, engine=\"python\",\n                       encoding='ISO-8859-1')\n\nall_genres = list()\nmovies['genres'].map(lambda x: all_genres.extend(x.split('|')))\n\ngenres = pd.unique(all_genres)\n\ndummies = pd.DataFrame(np.zeros((len(movies), len(genres))), columns=genres)\n\nfor i, gen in enumerate(movies.genres):\n    indices = dummies.columns.get_indexer(gen.split('|'))\n    dummies.iloc[i, indices] = 1\n\nmovies_windic = movies.join(dummies.add_prefix('Genre_'))\n```\n:::\n\n\n### String Manipulation\n\nThe key idea in this section is that, all methods in `pd.Series.str` will be applied to each entry of the Series.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ns = pd.Series([\"A \", \" B \", \"C\", \"Aaba\", \" Baca \", np.nan, \"CABA\", \"dog\", \"cat\"])\n\ns.str.lower()\ns.str.split('a')\ns.str.len()\ns.str.strip()\ns.str.replace(\"A\", '1')\n```\n\n::: {.cell-output .cell-output-display execution_count=455}\n```\n0        1 \n1        B \n2         C\n3      1aba\n4     Baca \n5       NaN\n6      C1B1\n7       dog\n8       cat\ndtype: object\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {#exm-}\nWe could also use `.str` to play with column names and row indexes.\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(3, 2),\n                  columns=[\" Column A \", \" Column B \"], index=range(3))\n\ndf.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=456}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_a</th>\n      <th>column_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.203150</td>\n      <td>0.485802</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.992644</td>\n      <td>-1.369211</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.253125</td>\n      <td>-1.458164</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n### Regular expression\n\n*Regular expressions* provide a flexible way to search or match string patterns in text. A single expression, commonly called a *regex*, is a string formed according to the regular expression language. Python’s built-in `re` module is responsible for applying regular expressions to strings.\n\nFor details of the regular expression language in Python, please read the official documents from [here](https://docs.python.org/3/library/re.html). There are also many great websites for learning regex. [This](https://regex101.com/) is one example.\n\nWe will briefly mentioned a few rules here.\n\n\n- `.`: matches any character except a newline. \n- `\\d`: matches any digit. It is the same as `[0-9]`.\n- `\\w`: matches any alphabatic or numeric character. It is the same as `[a-zA-Z0-9_]`.\n- `\\s`: matches any whitespaces. It is the same as `[\\t\\n\\r\\f\\v]`.\n- `*`: Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. \n- `+`: Causes the resulting RE to match 1 or more repetitions of the preceding RE, as many repetitions as are possible.\n- `?`: Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. \n- `*?`, `+?`, `??`: The `*`, `+`, and `?` qualifiers are all greedy; they match as much text as possible. Adding `?` after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched.\n- `{m}`: Specifies that exactly m copies of the previous RE should be matched.\n- `{m,n}`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as many repetitions as possible. \n- `{m,n}?`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as few repetitions as possible. \n- `[]`: Used to indicate a set of characters.\n- `()`: set groups.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nimport re\ntext = \"foo bar\\t baz \\tqux\"\npattern = '\\s+'\nregex = re.compile(pattern)\nregex.split(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=457}\n```\n['foo', 'bar', 'baz', 'qux']\n```\n:::\n:::\n\n\n:::\n\n- `.match()`\n- `.search()`\n- `.findall()`\n- `.split()`\n- `.sub()`\n\nWe can use `()` to specify groups, and use `.groups()` to get access to the results.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nimport re\npattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})'\nregex = re.compile(pattern, flags=re.IGNORECASE)\nm = regex.match('wesm@bright.net')\nm.groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=458}\n```\n('wesm', 'bright', 'net')\n```\n:::\n:::\n\n\n:::\n\nTo use regex to DataFrame and Series, you may directly apply `.match`, `.findall`, `.replace` after `.str`, with the regex pattern as one of the arguments.\n\n`.extract` is a method that is not from `re`. It is used to extract the matched groups and make them as a DataFrame. \n\n::: {#exm-}\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nmnames = ['movie_id', 'title', 'genres']\nmovies = pd.read_table('assests/datasets/movies.dat', sep='::',\n                       header=None, names=mnames, engine=\"python\",\n                       encoding='ISO-8859-1')\n\npattern = r'([a-zA-Z0-9_\\s,.?:;\\']+)\\((\\d{4})\\)'\nmovies = movies.join(movies.title.str.extract(pattern).rename(columns={0: 'movie title', 1: 'year'}))\n```\n:::\n\n\n:::\n\n\n\n## Data Wrangling\n\n### Hierarchical indexing {#sec-hierindexing}\nPandas support a more complex indexing system, that the index may have multiple levels. See the following example.\n\n\n::: {$exm-}\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = pd.Series(np.random.randn(9),\n                 index = [['a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd'],\n                          [1, 2, 3, 1, 2, 3, 1, 2, 3]])\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=460}\n```\na  1   -1.777783\n   2   -0.592208\n   3    1.763797\nb  1   -0.172889\n   2   -1.431344\nc  3    1.838218\n   1   -0.805426\nd  2    1.017499\n   3   -0.200287\ndtype: float64\n```\n:::\n:::\n\n\nYou may look at the Series using different levels of indexes.\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\ndata['a']\n```\n\n::: {.cell-output .cell-output-display execution_count=461}\n```\n1   -1.777783\n2   -0.592208\n3    1.763797\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\ndata.loc[:, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=462}\n```\na   -0.592208\nb   -1.431344\nd    1.017499\ndtype: float64\n```\n:::\n:::\n\n\nYou may use groupby to group by levels and do calculations related to levels. More `.groupby()` will be discussed in the next section. \n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\ndata.groupby(level=1).sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=463}\n```\n1   -2.756098\n2   -1.006053\n3    3.401728\ndtype: float64\n```\n:::\n:::\n\n\n:::\n\n\n\n\nFrom the example above, you may notice that the 2-level hierarchical indexing for a Series works very similar to a DataFrame. In fact, you may translate it back and forth between a 2-level indexing Series and a DataFrame.\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\ndf = data.unstack()\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=464}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>a</th>\n      <td>-1.777783</td>\n      <td>-0.592208</td>\n      <td>1.763797</td>\n    </tr>\n    <tr>\n      <th>b</th>\n      <td>-0.172889</td>\n      <td>-1.431344</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>c</th>\n      <td>-0.805426</td>\n      <td>NaN</td>\n      <td>1.838218</td>\n    </tr>\n    <tr>\n      <th>d</th>\n      <td>NaN</td>\n      <td>1.017499</td>\n      <td>-0.200287</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\ndf.stack()\n```\n\n::: {.cell-output .cell-output-display execution_count=465}\n```\na  1   -1.777783\n   2   -0.592208\n   3    1.763797\nb  1   -0.172889\n   2   -1.431344\nc  1   -0.805426\n   3    1.838218\nd  2    1.017499\n   3   -0.200287\ndtype: float64\n```\n:::\n:::\n\n\nFor DataFrame the index for both axes can be multiindex. The usual indexing way can be used if you want to start from the first level of the index. The more specific method to extract data is `.xs`.\n\n\n\n::: {#exm-}\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf1 = pd.DataFrame(\n    {\n        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n    },\n    index=[0, 1, 2, 3],\n)\n\ndf2 = pd.DataFrame(\n    {\n        \"A\": [\"A4\", \"A5\", \"A6\", \"A7\"],\n        \"B\": [\"B4\", \"B5\", \"B6\", \"B7\"],\n        \"C\": [\"C4\", \"C5\", \"C6\", \"C7\"],\n        \"D\": [\"D4\", \"D5\", \"D6\", \"D7\"],\n    },\n    index=[4, 5, 6, 7],\n)\n\ndf = pd.concat([df1, df2], keys=['x', 'y'])\n```\n:::\n\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=467}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">x</th>\n      <th>0</th>\n      <td>A0</td>\n      <td>B0</td>\n      <td>C0</td>\n      <td>D0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A1</td>\n      <td>B1</td>\n      <td>C1</td>\n      <td>D1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A2</td>\n      <td>B2</td>\n      <td>C2</td>\n      <td>D2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A3</td>\n      <td>B3</td>\n      <td>C3</td>\n      <td>D3</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">y</th>\n      <th>4</th>\n      <td>A4</td>\n      <td>B4</td>\n      <td>C4</td>\n      <td>D4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A5</td>\n      <td>B5</td>\n      <td>C5</td>\n      <td>D5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>A6</td>\n      <td>B6</td>\n      <td>C6</td>\n      <td>D6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>A7</td>\n      <td>B7</td>\n      <td>C7</td>\n      <td>D7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\ndf['A']\n```\n\n::: {.cell-output .cell-output-display execution_count=468}\n```\nx  0    A0\n   1    A1\n   2    A2\n   3    A3\ny  4    A4\n   5    A5\n   6    A6\n   7    A7\nName: A, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\ndf.loc['x']\n```\n\n::: {.cell-output .cell-output-display execution_count=469}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A0</td>\n      <td>B0</td>\n      <td>C0</td>\n      <td>D0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A1</td>\n      <td>B1</td>\n      <td>C1</td>\n      <td>D1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A2</td>\n      <td>B2</td>\n      <td>C2</td>\n      <td>D2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A3</td>\n      <td>B3</td>\n      <td>C3</td>\n      <td>D3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\ndf.loc['x',3]\n```\n\n::: {.cell-output .cell-output-display execution_count=470}\n```\nA    A3\nB    B3\nC    C3\nD    D3\nName: (x, 3), dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\ndf.xs(3, level=1, drop_level=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=471}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>x</th>\n      <th>3</th>\n      <td>A3</td>\n      <td>B3</td>\n      <td>C3</td>\n      <td>D3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n### Combining and Merging Datasets\n\n#### `merge()`\nMerge combines datasets by linking rows using one or more keys. This is from relational databases (e.g., SQL-based). \n\nHere are some examples. \n\n::: {#exm-}\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'],\n                    'data1': range(7)})\ndf2 = pd.DataFrame({'key': ['a', 'b', 'd'], 'data2': range(3)})\n```\n:::\n\n\nThe two DataFrames are displayed as follows.\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\ndf1\n```\n\n::: {.cell-output .cell-output-display execution_count=473}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>data1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>b</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>b</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>a</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>c</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>a</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>a</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>b</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=474}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>data2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>a</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>b</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>d</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\npd.merge(df1, df2, on='key')\n```\n\n::: {.cell-output .cell-output-display execution_count=475}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>data1</th>\n      <th>data2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>b</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>b</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>a</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>a</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>a</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf the column names are different in each object, you can specify them separately.\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\ndf3 = pd.DataFrame({'lkey': ['b', 'b', 'a', 'c', 'a', 'a', 'b'],\n                    'data1': range(7)})\ndf4 = pd.DataFrame({'rkey': ['a', 'b', 'd'],\n                    'data2': range(3)})\npd.merge(df3, df4, left_on='lkey', right_on='rkey')\n```\n\n::: {.cell-output .cell-output-display execution_count=476}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lkey</th>\n      <th>data1</th>\n      <th>rkey</th>\n      <th>data2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>b</td>\n      <td>0</td>\n      <td>b</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>b</td>\n      <td>1</td>\n      <td>b</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>6</td>\n      <td>b</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>a</td>\n      <td>2</td>\n      <td>a</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>a</td>\n      <td>4</td>\n      <td>a</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>a</td>\n      <td>5</td>\n      <td>a</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nBy default `merge` does an inner join, that the keys in the result are the interesection found in both tables. Below are different types of `merge`. To specify the method for merge, the option is `how`.\n\n- `inner`\n- `left`\n- `right`\n- `outer`\n\nLet's see the following examples.\n\n\n\n\n::: {.grid}\n\n::: {.g-col-6}\n\n::: {.cell execution_count=85}\n``` {.python .cell-code}\ndf1 = pd.DataFrame({'Key': [1, 2], 'A': [0, 2], 'B': [1, 3]})\ndf1\n```\n\n::: {.cell-output .cell-output-display execution_count=477}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Key</th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell execution_count=86}\n``` {.python .cell-code}\ndf2 = pd.DataFrame({'Key': [1, 3], 'C': [0, 2], 'D': [1, 3]})\ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=478}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Key</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n\n::: {.grid}\n\n\n::: {.g-col-6}\n\n::: {.cell execution_count=87}\n``` {.python .cell-code}\npd.merge(df1, df2, on='Key', how='inner')\n```\n\n::: {.cell-output .cell-output-display execution_count=479}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Key</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {.g-col-6}\n\n::: {.cell execution_count=88}\n``` {.python .cell-code}\npd.merge(df1, df2, on='Key', how='outer')\n```\n\n::: {.cell-output .cell-output-display execution_count=480}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Key</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n\n::: {.grid}\n\n\n::: {.g-col-6}\n\n::: {.cell execution_count=89}\n``` {.python .cell-code}\npd.merge(df1, df2, on='Key', how='left')\n```\n\n::: {.cell-output .cell-output-display execution_count=481}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Key</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell execution_count=90}\n``` {.python .cell-code}\npd.merge(df1, df2, on='Key', how='right')\n```\n\n::: {.cell-output .cell-output-display execution_count=482}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Key</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n\n::: {.callout-note}\nIf a key combination appears more than once in both tables, the resulting table will have the Cartesian product of the associated data. Here is a very basic example with one unique key combination.\n\n::: {.cell execution_count=91}\n``` {.python .cell-code}\ndf1 = pd.DataFrame({'key': ['b', 'b', 'a', 'c', 'a', 'b'],\n                    'data1': range(6)})\ndf2 = pd.DataFrame({'key': ['a', 'b', 'a', 'b', 'd'],\n                    'data2': range(5)})\npd.merge(df1, df2, on='key', how='left')\n```\n\n::: {.cell-output .cell-output-display execution_count=483}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>data1</th>\n      <th>data2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>b</td>\n      <td>0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>b</td>\n      <td>0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>b</td>\n      <td>1</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>a</td>\n      <td>2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>a</td>\n      <td>2</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>c</td>\n      <td>3</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>a</td>\n      <td>4</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>a</td>\n      <td>4</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>b</td>\n      <td>5</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>b</td>\n      <td>5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note} \nIf the merge keys in a DataFrame is in its index instead of column(s), we could pass `left_index=True` or `right_index=True` or both instead of setting `left_on`/`right_on`/`on`.\n:::\n\n\n::: {#exm-crossexample-deck}\nIf we want to really create a Cartesian product, we may use the option `how='cross'`. For example, we would like to generate a deck of cards, we may use the following codes.\n\n::: {.cell execution_count=92}\n``` {.python .cell-code}\nsuit = pd.DataFrame({'suit': ['spades', 'hearts', 'clubs', 'diamonds']})\nface = pd.DataFrame({'face': list(range(1, 14))})\ndeck = pd.merge(suit, face, how='cross')\n```\n:::\n\n\n:::\n\n\n\n#### `concat()`\nThe `concat()` function (in the main pandas namespace) performs concatenation operations along an axis while performing optional set logic (union or intersection) of the indexes (if any) on the other axes.  \n\n::: {.cell execution_count=93}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf1 = pd.DataFrame(\n    {\n        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n    },\n    index=[0, 1, 2, 3],\n)\n\ndf2 = pd.DataFrame(\n    {\n        \"A\": [\"A4\", \"A5\", \"A6\", \"A7\"],\n        \"B\": [\"B4\", \"B5\", \"B6\", \"B7\"],\n        \"C\": [\"C4\", \"C5\", \"C6\", \"C7\"],\n        \"D\": [\"D4\", \"D5\", \"D6\", \"D7\"],\n    },\n    index=[4, 5, 6, 7],\n)\n\ndf3 = pd.DataFrame(\n    {\n        \"A\": [\"A8\", \"A9\", \"A10\", \"A11\"],\n        \"B\": [\"B8\", \"B9\", \"B10\", \"B11\"],\n        \"C\": [\"C8\", \"C9\", \"C10\", \"C11\"],\n        \"D\": [\"D8\", \"D9\", \"D10\", \"D11\"],\n    },\n    index=[8, 9, 10, 11],\n)\n\npd.concat([df1, df2, df3], keys=['x', 'y', 'z'])\n```\n\n::: {.cell-output .cell-output-display execution_count=485}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">x</th>\n      <th>0</th>\n      <td>A0</td>\n      <td>B0</td>\n      <td>C0</td>\n      <td>D0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A1</td>\n      <td>B1</td>\n      <td>C1</td>\n      <td>D1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A2</td>\n      <td>B2</td>\n      <td>C2</td>\n      <td>D2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A3</td>\n      <td>B3</td>\n      <td>C3</td>\n      <td>D3</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">y</th>\n      <th>4</th>\n      <td>A4</td>\n      <td>B4</td>\n      <td>C4</td>\n      <td>D4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A5</td>\n      <td>B5</td>\n      <td>C5</td>\n      <td>D5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>A6</td>\n      <td>B6</td>\n      <td>C6</td>\n      <td>D6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>A7</td>\n      <td>B7</td>\n      <td>C7</td>\n      <td>D7</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">z</th>\n      <th>8</th>\n      <td>A8</td>\n      <td>B8</td>\n      <td>C8</td>\n      <td>D8</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>A9</td>\n      <td>B9</td>\n      <td>C9</td>\n      <td>D9</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>A10</td>\n      <td>B10</td>\n      <td>C10</td>\n      <td>D10</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>A11</td>\n      <td>B11</td>\n      <td>C11</td>\n      <td>D11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe default way of `pd.concat()` is vertically. Note that it will check the column names. If the column names don't match, new columns will be created and `nan` values will be assigned. \n\nIf you want to concatenate the DataFrame horizontally you need to add `axis=1` option.\nSimilarly, row index will be checked before concatenating. See the following example.\n\n::: {#exm-}\n\n::: {.cell execution_count=94}\n``` {.python .cell-code}\npd.concat([df1, df2, df3], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=486}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A0</td>\n      <td>B0</td>\n      <td>C0</td>\n      <td>D0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A1</td>\n      <td>B1</td>\n      <td>C1</td>\n      <td>D1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A2</td>\n      <td>B2</td>\n      <td>C2</td>\n      <td>D2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A3</td>\n      <td>B3</td>\n      <td>C3</td>\n      <td>D3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A4</td>\n      <td>B4</td>\n      <td>C4</td>\n      <td>D4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A5</td>\n      <td>B5</td>\n      <td>C5</td>\n      <td>D5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A6</td>\n      <td>B6</td>\n      <td>C6</td>\n      <td>D6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A7</td>\n      <td>B7</td>\n      <td>C7</td>\n      <td>D7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A8</td>\n      <td>B8</td>\n      <td>C8</td>\n      <td>D8</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A9</td>\n      <td>B9</td>\n      <td>C9</td>\n      <td>D9</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A10</td>\n      <td>B10</td>\n      <td>C10</td>\n      <td>D10</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A11</td>\n      <td>B11</td>\n      <td>C11</td>\n      <td>D11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {#exm-}\nConsider the deck example from @exm-crossexample-deck. This time we would like to use `pd.concat()` to get the result.\n\n::: {.cell execution_count=95}\n``` {.python .cell-code}\nsuitlist = ['spades', 'hearts', 'clubs', 'diamonds']\nfacelist = list(range(1, 14))\ndecklist = [pd.DataFrame({'suit': suit, 'face': facelist}) for suit in suitlist]\ndeck = pd.concat(decklist, ignore_index=True)\n```\n:::\n\n\n:::\n\n\n## Data Aggregation and Group Operations\n\n### split-apply-combine model\n\nWe would like to apply group operations based on the split-apply-combine model. \n\n- In the first stage of the process, data contained in a pandas object is *split* into groups based on one or more keys that you provide. We then use `.groupby(keys)` to perform the split step. The result is a grouped `groupby` object.\n- Once this is done, a function is *applied* to each group, producing a new value. \n- Finally the results of all those function applications are combined into a result object. We may apply groupby functions directly as methods to groupby objects.The result is the combined result object.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=96}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame({'key1' : ['a', 'a', 'b', 'b', 'a'],\n                   'key2' : ['one', 'two', 'one', 'two', 'one'],\n                   'data1' : np.random.randn(5),\n                   'data2' : np.random.randn(5)})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=488}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key1</th>\n      <th>key2</th>\n      <th>data1</th>\n      <th>data2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>a</td>\n      <td>one</td>\n      <td>1.940095</td>\n      <td>0.375879</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>a</td>\n      <td>two</td>\n      <td>-3.002278</td>\n      <td>-0.781760</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>one</td>\n      <td>-0.128683</td>\n      <td>0.854438</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>b</td>\n      <td>two</td>\n      <td>-1.557733</td>\n      <td>1.858680</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>a</td>\n      <td>one</td>\n      <td>-1.391069</td>\n      <td>0.531516</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow we want to group `data1` in `df` by `key1`.\n\n::: {.cell execution_count=97}\n``` {.python .cell-code}\ngrouped = df['data1'].groupby(df['key1'])\ngrouped\n```\n\n::: {.cell-output .cell-output-display execution_count=489}\n```\n<pandas.core.groupby.generic.SeriesGroupBy object at 0x0000015F76295990>\n```\n:::\n:::\n\n\nWhat we get is a groupby object and we could apply group functions to it.\n\nThe method to look at each group is `.get_group`.\n\n::: {.cell execution_count=98}\n``` {.python .cell-code}\ngrouped.get_group('a')\n```\n\n::: {.cell-output .cell-output-display execution_count=490}\n```\n0    1.940095\n1   -3.002278\n4   -1.391069\nName: data1, dtype: float64\n```\n:::\n:::\n\n\nWe may directly apply some group functions to the groupby object.\n\n::: {.cell execution_count=99}\n``` {.python .cell-code}\ngrouped.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=491}\n```\nkey1\na   -0.817751\nb   -0.843208\nName: data1, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=100}\n``` {.python .cell-code}\ngrouped.size()\n```\n\n::: {.cell-output .cell-output-display execution_count=492}\n```\nkey1\na    3\nb    2\nName: data1, dtype: int64\n```\n:::\n:::\n\n\nWe could iterate over groups.\n\n::: {.cell execution_count=101}\n``` {.python .cell-code}\nfor name, group in grouped:\n    print('name', name)\n    print('group', group)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname a\ngroup 0    1.940095\n1   -3.002278\n4   -1.391069\nName: data1, dtype: float64\nname b\ngroup 2   -0.128683\n3   -1.557733\nName: data1, dtype: float64\n```\n:::\n:::\n\n\nWe could convert the group object into list and dictionary.\n\n::: {.cell execution_count=102}\n``` {.python .cell-code}\nlist(grouped)\n```\n\n::: {.cell-output .cell-output-display execution_count=494}\n```\n[('a',\n  0    1.940095\n  1   -3.002278\n  4   -1.391069\n  Name: data1, dtype: float64),\n ('b',\n  2   -0.128683\n  3   -1.557733\n  Name: data1, dtype: float64)]\n```\n:::\n:::\n\n\n::: {.cell execution_count=103}\n``` {.python .cell-code}\ndict(list(grouped))\n```\n\n::: {.cell-output .cell-output-display execution_count=495}\n```\n{'a': 0    1.940095\n 1   -3.002278\n 4   -1.391069\n Name: data1, dtype: float64,\n 'b': 2   -0.128683\n 3   -1.557733\n Name: data1, dtype: float64}\n```\n:::\n:::\n\n\n:::\n\n### More aggregation functions\n\n- `.describe()`\n- `.count()`\n- `.sum()`\n- `.mean()`\n- `.median`\n- `.std()`, `.var()`\n- `.min()`, `.max()`\n- `.prod()`\n- `first()`, `.last()`\n- `.agg()`\n\n\n### Some examples\n\n\n::: {#exm-}\nConsider the following DataFrame.\n\n::: {.cell execution_count=104}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame({'location': ['East', 'East', 'East', 'East',\n                                'West', 'West', 'West', 'West'],\n                   'data': np.random.randn(8)},\n                   index=['Ohio', 'New York', 'Vermont', 'Florida',\n                          'Oregon', 'Nevada', 'California', 'Idaho'])\ndf.loc[['Vermont', 'Nevada', 'Idaho'], 'data'] = np.nan\n```\n:::\n\n\nWe would like to fill in NA values with the mean from each group.\n\n::: {.cell execution_count=105}\n``` {.python .cell-code}\ndf.groupby('location').apply(lambda x: x.fillna(x.mean()))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_25936\\2040193686.py:1: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  df.groupby('location').apply(lambda x: x.fillna(x.mean()))\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_25936\\2040193686.py:1: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.\nTo preserve the previous behavior, use\n\n\t>>> .groupby(..., group_keys=False)\n\nTo adopt the future behavior and silence this warning, use \n\n\t>>> .groupby(..., group_keys=True)\n  df.groupby('location').apply(lambda x: x.fillna(x.mean()))\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=497}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>data</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Ohio</th>\n      <td>East</td>\n      <td>0.473128</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>East</td>\n      <td>-0.426999</td>\n    </tr>\n    <tr>\n      <th>Vermont</th>\n      <td>East</td>\n      <td>-0.392213</td>\n    </tr>\n    <tr>\n      <th>Florida</th>\n      <td>East</td>\n      <td>-1.222768</td>\n    </tr>\n    <tr>\n      <th>Oregon</th>\n      <td>West</td>\n      <td>0.903726</td>\n    </tr>\n    <tr>\n      <th>Nevada</th>\n      <td>West</td>\n      <td>0.843036</td>\n    </tr>\n    <tr>\n      <th>California</th>\n      <td>West</td>\n      <td>0.782345</td>\n    </tr>\n    <tr>\n      <th>Idaho</th>\n      <td>West</td>\n      <td>0.843036</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe could also fill in NA values with predefined values, similar to the non-groupby case.\n\n::: {.cell execution_count=106}\n``` {.python .cell-code}\ndf.groupby('location').apply(lambda x: x.fillna({'East': 0.1,\n                                                 'West': -0.5}[x.name]))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_25936\\1912363449.py:1: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.\nTo preserve the previous behavior, use\n\n\t>>> .groupby(..., group_keys=False)\n\nTo adopt the future behavior and silence this warning, use \n\n\t>>> .groupby(..., group_keys=True)\n  df.groupby('location').apply(lambda x: x.fillna({'East': 0.1,\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=498}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>data</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Ohio</th>\n      <td>East</td>\n      <td>0.473128</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>East</td>\n      <td>-0.426999</td>\n    </tr>\n    <tr>\n      <th>Vermont</th>\n      <td>East</td>\n      <td>0.100000</td>\n    </tr>\n    <tr>\n      <th>Florida</th>\n      <td>East</td>\n      <td>-1.222768</td>\n    </tr>\n    <tr>\n      <th>Oregon</th>\n      <td>West</td>\n      <td>0.903726</td>\n    </tr>\n    <tr>\n      <th>Nevada</th>\n      <td>West</td>\n      <td>-0.500000</td>\n    </tr>\n    <tr>\n      <th>California</th>\n      <td>West</td>\n      <td>0.782345</td>\n    </tr>\n    <tr>\n      <th>Idaho</th>\n      <td>West</td>\n      <td>-0.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n\n\n\n\n\n\n### Essential functions\n- Arithmetic and Data Alignment\nElements of the same index and columns will be computed. By default, if any entry is `nan`, the answer will be `nan`. You may use `fill_value` argument to fill the empty slots.\n\n\n::: {#exm-}\n\n::: {.cell execution_count=107}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list('abcd'))\ndf2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde'))\ndf2.loc[1, 'b'] = np.nan\n\ndf1.add(df2, fill_value=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=499}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n      <th>d</th>\n      <th>e</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>6.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.0</td>\n      <td>5.0</td>\n      <td>13.0</td>\n      <td>15.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>20.0</td>\n      <td>22.0</td>\n      <td>24.0</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15.0</td>\n      <td>16.0</td>\n      <td>17.0</td>\n      <td>18.0</td>\n      <td>19.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nRelatedly, when reindexing a Series or DataFrame, you can also specify a `fill_value`.\n\n### Function Application and Mapping\nWe may apply functions to each row/column of a DataFrame. If the function is built-in function that is compatible with DataFrame, you can directly call the function that it will be applied automatically to each row/column. If it is not, we can call `apply` to get the desired result. \n\n\n::: {#exm-}\n\n::: {.cell execution_count=108}\n``` {.python .cell-code}\nimport pandas as pd\ndata = pd.DataFrame(np.random.rand(4, 4),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\n\nf = lambda x: x.max() - x.min()\n\nprint(data.apply(f))\nprint(data.apply(f, axis='columns'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none      0.630860\ntwo      0.461422\nthree    0.701370\nfour     0.429435\ndtype: float64\nOhio        0.351705\nColorado    0.402297\nUtah        0.329658\nNew York    0.753226\ndtype: float64\n```\n:::\n:::\n\n\n:::\n\n\nWe can use more complicated function to get more complicated result.\n\n::: {#exm-}\n\n::: {.cell execution_count=109}\n``` {.python .cell-code}\nimport pandas as pd\ndata = pd.DataFrame(np.random.rand(4, 4),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\n\nf = lambda x: pd.Series([x.max(), x.min()], index=['max', 'min'])\n\nprint(data.apply(f))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          one       two     three      four\nmax  0.963483  0.293356  0.765423  0.630970\nmin  0.509265  0.021969  0.113109  0.003768\n```\n:::\n:::\n\n\n:::\n\n\n### Sorting and Ranking\n\n- `.sort_values(by=)`\n- `.rank(ascending=, method=)`\n\n\n\n\n### Summarizing and Computing Descriptive Statistics\n\n- `sum`, `cumsum`\n- `mean`, `median`\n- `.describe()`\n- `.cov`, `.corr`\n\n### Unique Values, Value Counts, and Membership\n- `unique`\n- `value_counts`\n\n\n\n### Reading and Writing Data in Text Format\n- `read_csv`\n- `read_excel`\n- `df.to_csv`\n\n\n### Copies and views\n\n- `inplace`\n\n\n\n\n\n## Exercises\nMany problems are based on @Pra2018a.\n\n\n\n::: {#exr-}\nLet `df` be a `DataFrame`. Please answer the following questions in a Markdown cell.\n\n1. What does `df[0]` do?\n2. What does `df[[0]]` do?\n3. What does `df[0:1]` do?\n:::\n\n\n\n::: {#exr-}\nPlease use the following code to generate a series `ser`, and then finish the following tasks.\n\n::: {.cell execution_count=110}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n\nmylist = list('abcedfghijklmnopqrstuvwxyz')\nmyarr = np.arange(26)\nmydict = dict(zip(mylist, myarr))\nser = pd.Series(mydict)\n```\n:::\n\n\n1. Convert the series `ser` into a dataframe `df` with its index as another column on the dataframe.\n2. Pick the two columns of `df` and set them into two serieses `ser1` and `ser2`. \n3. Combine two series `ser1` and `ser2` to form a new dataframe `newdf`, and name their columns `ser1` and `ser2`.\n:::\n\n\n\n\n::: {#exr-}\nConsider two serieses `ser1` and `ser2`. You may use the following `ser1` and `ser2` as an example. The output of each questions below should be a series. You may want to learn the following commands:\n\n- [`np.union1d()`](https://numpy.org/doc/stable/reference/generated/numpy.union1d.html)\n- [`np.intersect1d()`](https://numpy.org/doc/stable/reference/generated/numpy.intersect1d.html)\n- [`np.isin()`](https://numpy.org/doc/stable/reference/generated/numpy.isin.html)\n\n::: {.cell execution_count=111}\n``` {.python .cell-code}\nimport pandas as pd\n\nser1 = pd.Series([1, 2, 3, 4, 5])\nser2 = pd.Series([4, 5, 6, 7, 8])\n```\n:::\n\n\n1. Find all the elements from `ser1` that are also in `ser2`.\n2. Find all the elements from `ser2` that are also in `ser1`.\n3. From `ser1` remove items present in `ser2`.\n4. Find the union of `ser1` and `ser2`.\n5. Find the intersection of `ser1` and `ser2`.\n6. Find all the elemetns that are in either `ser1` or `ser2`, but not both.\n:::\n\n\n\n::: {#exr-}\nConsider the following `DataFrame`.\n\n::: {.cell execution_count=112}\n``` {.python .cell-code}\nimport pandas as pd\n\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\n```\n:::\n\n\n1. Please select the column `two`.\n2. Please select the second and the third row.\n3. Please find the rows that the column `three` value is bigger than `5`.\n4. Please find the last row that the column `three` value is bigger than `5`.\n5. Please find the rows that the column `three` value is bigger than `5`, and display the resulted `DataFrame` with only `Colorado` and `Utah` row and `four` and `one` columns, in the specified order.\n:::\n\n\n\n::: {#exr-}\n## Some statistics\nPlease check the following commands and answer the following questions.\n\n- [`np.percentile()`](https://numpy.org/doc/stable/reference/generated/numpy.percentile.html)\n\nHow to get the minimum, 25th percentile, median, 75th, and max of a numeric series? You may use the following Series as an example.\n\n::: {.cell execution_count=113}\n``` {.python .cell-code}\nimport pandas as pd\nser = pd.Series(np.random.normal(10, 5, 25))\n```\n:::\n\n\n:::\n\n\n\n::: {#exr-}\nPlease use `pd.Series.value_counts()` to calculte the frequency counts of each unique value of the following Series.\n\n::: {.cell execution_count=114}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.take(list('abcdefgh'), np.random.randint(8, size=30)))\n```\n:::\n\n\n:::\n\n\n::: {#exr-}\nPlease keep the top 2 most frequent items of `ser` as it is and replace everything else as `Other`.\n\n::: {.cell execution_count=115}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.take(list('abcdefgh'), np.random.randint(8, size=30)))\n```\n:::\n\n\n:::\n\n\n::: {#exr-}\nPlease use `pd.cut` or `pd.qcut` to bin the Series `ser` into 10 equal deciles. You may use the following `ser` as an example.\n\n::: {.cell execution_count=116}\n``` {.python .cell-code}\nimport pandas as pd\nser = pd.Series(np.random.random(20))\n```\n:::\n\n\n:::\n\n\n::: {#exr-}\nConsider the Series `ser`:\n\n::: {.cell execution_count=117}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.randint(1, 10, 7))\n```\n:::\n\n\nFind the positions of numbers that are multiples of 3 from ser.\n:::\n\n\n\n\n\n\n::: {#exr-}\nCompute the mean of `weights` of each `fruit`.\n\n::: {.cell execution_count=118}\n``` {.python .cell-code}\nimport pandas as pd\nfruit = pd.Series(np.random.choice(['apple', 'banana', 'carrot'], 10))\nweights = pd.Series(np.linspace(1, 10, 10))\ndf = pd.DataFrame({'fruit': fruit, 'weights': weights})\n```\n:::\n\n\n:::\n\n\n::: {#exr-}\nConsider the following DataFrame. \n\n::: {.cell execution_count=119}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')\n```\n:::\n\n\n1. Check if `df` has any missing values.\n2. Please count the number of missing values in each column.\n3. Please replace all missing values in `Min.Price` and `Max.Price` with their mean respectively.\n\n<!-- 3. In the original DataFrame, please replace the missing values in `Min.Price` with the column's mean and those in `Max.Price` with the column's median. -->\n:::\n\n\n\n\n\n::: {#exr-}\nReplace the spaces in `my_str = 'dbc deb abed gade'` with the least frequent character.\n:::\n\n\n::: {#exr-}\nSuppress scientific notations like `e-03` in `df` and print up to 4 numbers after decimal.\n\n::: {.cell execution_count=120}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.random(4)**10, columns=['random'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=512}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>random</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.192536e-08</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.307101e-20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.122744e-02</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.068529e-02</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {#exr-}\nFormat the values in column `random` of `df` as percentages.\n\n::: {.cell execution_count=121}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.random.random(4), columns=['random'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=513}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>random</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.748674</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.373450</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.821618</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.032364</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {#exr-}\n## Regular expressions\nPlease use regular expressions to finish the following tasks.\n\n1. Match a string that has an `a` followed by zero or more `b`'s.\n2. Match a string that has an `a` followed by one or more `b`'s.\n3. Match a string that has an `a` followed by zero or one `b`.\n4. Match a string that has an `a` followed by three `b`'s.\n:::\n\n\n\n::: {#exr-}\n## More regex\nFind all words starting with `a` or `e` in a given string:\n\n::: {.cell execution_count=122}\n``` {.python .cell-code}\ntext = \"The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\n```\n:::\n\n\n:::\n\n\n::: {#exr-}\n## More regex\nWrite a Python code to extract year, month and date from a `url1`: \n\n::: {.cell execution_count=123}\n``` {.python .cell-code}\nurl1= \"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"\n```\n:::\n\n\n:::\n\n\n\n\n::: {#exr-}\n## More regex\nPlease use regex to parse the following str to create a dictionary.\n\n::: {.cell execution_count=124}\n``` {.python .cell-code}\ntext = r'''\n{\n    name: Firstname Lastname;\n    age: 100;\n    salary: 10000 \n}\n'''\n```\n:::\n\n\n:::\n\n\n\n::: {#exr-}\nConsider the following DataFrame.\n\n::: {.cell execution_count=125}\n``` {.python .cell-code}\ndata = [['Evert van Dijk', 'Carmine-pink, salmon-pink streaks, stripes, flecks.  Warm pink, clear carmine pink, rose pink shaded salmon.  Mild fragrance.  Large, very double, in small clusters, high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Every Good Gift', 'Red.  Flowers velvety red.  Moderate fragrance.  Average diameter 4\".  Medium-large, full (26-40 petals), borne mostly solitary bloom form.  Blooms in flushes throughout the season.'], \n        ['Evghenya', 'Orange-pink.  75 petals.  Large, very double bloom form.  Blooms in flushes throughout the season.'], \n        ['Evita', 'White or white blend.  None to mild fragrance.  35 petals.  Large, full (26-40 petals), high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Evrathin', 'Light pink. [Deep pink.]  Outer petals white. Expand rarely.  Mild fragrance.  35 to 40 petals.  Average diameter 2.5\".  Medium, double (17-25 petals), full (26-40 petals), cluster-flowered, in small clusters bloom form.  Prolific, once-blooming spring or summer.  Glandular sepals, leafy sepals, long sepals buds.'],\n        ['Evita 2', 'White, blush shading.  Mild, wild rose fragrance.  20 to 25 petals.  Average diameter 1.25\".  Small, very double, cluster-flowered bloom form.  Blooms in flushes throughout the season.']]\n  \ndf = pd.DataFrame(data, columns = ['NAME', 'BLOOM']) \ndf \n```\n\n::: {.cell-output .cell-output-display execution_count=517}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NAME</th>\n      <th>BLOOM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Evert van Dijk</td>\n      <td>Carmine-pink, salmon-pink streaks, stripes, fl...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Every Good Gift</td>\n      <td>Red.  Flowers velvety red.  Moderate fragrance...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Evghenya</td>\n      <td>Orange-pink.  75 petals.  Large, very double b...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Evita</td>\n      <td>White or white blend.  None to mild fragrance....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Evrathin</td>\n      <td>Light pink. [Deep pink.]  Outer petals white. ...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Evita 2</td>\n      <td>White, blush shading.  Mild, wild rose fragran...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlease use regex methods to find all the `()` in each columns.\n\n:::\n\n\n\n\n::: {#exr-}\nGet the last two rows of `df` whose row sum is greater than 100.\n\n::: {.cell execution_count=126}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame(np.random.randint(10, 40, 60).reshape(-1, 4))\n```\n:::\n\n\n:::\n\n\n\n::: {#exr-}\nThe groupby object `df_grouped` is given below.\n\n::: {.cell execution_count=127}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'fruit': ['apple', 'banana', 'orange'] * 3,\n                   'price': np.random.rand(9),\n                   'taste': np.random.randint(0, 11, 9)})\n\ndf_grouped = df.groupby(['fruit'])\n```\n:::\n\n\n1. Get the group belonging to `apple` as a DataFrame.\n2. Find the second largest value of `taste` for `banana`.\n3. Compute the mean `price` for every `fruit`.\n:::\n\n\n::: {#exr-}\n\nJoin `df1` and `df2` by `fruit`/`pazham` and `weight`/`kilo`.\n\n::: {.cell execution_count=128}\n``` {.python .cell-code}\ndf1 = pd.DataFrame({'fruit': ['apple', 'banana', 'orange'] * 3,\n                    'weight': ['high', 'medium', 'low'] * 3,\n                    'price': np.random.randint(0, 15, 9)})\n\ndf2 = pd.DataFrame({'pazham': ['apple', 'orange', 'pine'] * 2,\n                    'kilo': ['high', 'low'] * 3,\n                    'price': np.random.randint(0, 15, 6)})\n```\n:::\n\n\n:::\n\n\n\n\n\n\n\n\n\n::: {#exr-}\nExtract the valid emails from the series `emails`. The regex `pattern` for valid emails is provided as reference.\n\n::: {.cell execution_count=129}\n``` {.python .cell-code}\nimport pandas as pd\nemails = pd.Series(['buying books at amazom.com',\n                    'rameses@egypt.com',\n                    'matt@t.co',\n                    'narendra@modi.com'])\npattern = '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}'\n```\n:::\n\n\n:::\n\n\n\n::: {#exr-}\nConsider the following DataFrame.\n\n::: {.cell execution_count=130}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv', usecols=[0,1,2,3,5])\n```\n:::\n\n\n1. Replace `NaN` with string `missing` in columns `Manufacturer`, `Model` and `Type`.\n2. Create an index as a combination of these three columns.\n\n:::\n\n\n::: {#exr-}\nGiven the following DataFrame.\n\n::: {.cell execution_count=131}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame({\n    'name': ['James', 'Jane', 'Melissa', 'Ed', 'Neil'],\n    'age': [30, 40, 32, 67, 43],\n    'score': ['90%', '95%', '100%', '82%', '87%'],\n    'age_missing_data': [30, 40, 32, 67, None],\n    'income':[100000, 80000, 55000, 62000, 120000]\n})\n```\n:::\n\n\n- Please use `.map` to create a new column `numeric_score` whose value is the number version of `score`. \n- Please use `.apply` to create a new column `numeric_score` whose value is the number version of `score`. \n:::\n\n\n::: {#exr-}\nFrom `ser = pd.Series(['Apple', 'Orange', 'Plan', 'Python', 'Money'])`, find the words that contain at least 2 vowels.\n:::\n\n\n\n::: {#exr-}\nPlease download the [given file](assests/datasets/test_emails.txt) with sample emails, and use the following code to load the file and save it to a string `content`.\n\n::: {.cell execution_count=132}\n``` {.python .cell-code}\nwith open('assests/datasets/test_emails.txt', 'r') as f:\n    content = f.read()\n```\n:::\n\n\nPlease use regex to play with `content`.\n\n1. Get all valid email address in `content`, from both the header part or the body part.\n2. There are two emails in `content`. Please get the sender's email and the receiver's email from `content`.\n3. Please get the sender's name.\n4. Please get the subject of each email.\n:::\n\n\n\n::: {#exr-}\nThe following DataFrame is given.\n\n::: {.cell execution_count=133}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame([\"STD, City    State\",\n                   \"33, Kolkata    West Bengal\",\n                   \"44, Chennai    Tamil Nadu\",\n                   \"40, Hyderabad    Telengana\",\n                   \"80, Bangalore    Karnataka\"],\n                   columns=['row'])\n```\n:::\n\n\n1. Split the columns into a list with 3 entries.\n2. Make the first row (row 0) into a header.\n3. Create a new DataFrame out of the data.\n:::\n\n\n\n\n\n\n\n\n## References {.unnumbered}\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}