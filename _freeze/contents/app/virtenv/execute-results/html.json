{
  "hash": "5986951e4e34fc4f710d3993f8dd2299",
  "result": {
    "markdown": "---\nformat:\n   html:\n     code-line-numbers: false\n     code-block-border-left: false \n---\n\n# Package management\n\n\n\n\n## Package management\nThere are two most popular package management tools for Python, `pip` and `conda`. \n\n- [`pip`](https://pip.pypa.io/) is the official package management tool for Python. \n- [`conda`](https://github.com/conda/conda) was originally developed by Anaconda Inc., and later became open-sourced. \n\nIn this course, we mainly focus on `conda` since it is designed towards Data Science.\n\n1. Install packages. You may specify the particular version number.\n\n```{.bash}\nconda install <pkg name>\nconda install <pkg name>=<version number>\n```\n\n2. List all installed packages, or list several specific installed packages:\n\n```{.bash}\nconda list\nconda list <pkg names>\n```\n\n3. Update packages.\n\n```{.bash}\nconda updata <pkg name>\n```\n\n4. Remove packages.\n\n```{.bash}\nconda remove <pkg name>\n```\n5. If the packages you want is in `PyPI` but not in `conda` channels, you may use `pip` to install that package.\n\n```{.bash}\npip install <pkg name>\n```\nNote that if the package is in both `conda` channels and `PyPI`, it is recommended not to mix `pip` and `conda`. If you start from `conda`, just stick to `conda`. Only use `pip` when you have to.\n\n\n\n::: {.callout-note collapse=\"true\"}\n## `PyPI` and `conda-forge`\n\nThe package managemers will download packages from online repository to install in your environment. By default, `pip` and `conda` use two different repositories. \n\n- [`PyPI`](https://pypi.org/): `PyPI` stands for *Python Package Index*. It is the official third-party software repository for Python. `pip` use it as the default source for packages and their dependencies. Packages on `PyPI` are typically uploaded by the author of the Python package. \n- [`conda-forge`](https://conda-forge.org/): Anaconda, Inc. provides several channels that host packages. `Conda-Forge` is one of the most important channels. Although it is a community project, it is now the recommended channel to get packages through `conda`. In `conda-forge`, package maintainers can be different than the original author of the package. \n\nUsually `PyPI` contains more packages than `conda-forge`, and the versions of packages get to `PyPI` faster. However, when using `conda` through `conda-forge`, more safty checks are done and `conda` will try its best to make the installed packages compatible. \n\nTo install from `conda-forge` using `conda`, you should add an argument `-c`:\n\n```{.bash}\nconda install -c conda-forge <pkg name>\n```\n:::\n\n\n\n\n\n## Virtual environments\nVirtual environments provide a project-specific version of installed packages. This both helps you to faithfully reproduce your environment as well as isolate the use of packages so that upgrading a package in one project doesnâ€™t break other projects. In this section we are going to use `conda` to manage environments. The main reference is the official [document](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html). We will just list the minimal working examples here. For more functions please read the official document. \n\n1. To create an environment:\n\n```{.bash}\nconda create --name <env name>\n```\n\n2. To activate an environment:\n\n```{.bash}\nconda activate <env name>\n```\n\n3. To deactivate an environment:\n\n```{.bash}\nconda deactivate\n```\n\n4. To remove an environemnt, both of the following commands work:\n\n```{.bash}\nconda remove --name <env name> --all\nconda env remove -n <env name>\n```\n\n5. To get all enviroments in the system:\n\n```{.bash}\nconda env list\nconda info --envs\n```\n\n\n\n::: {.callout-note collapse=\"true\"}\n## `pip` and `venv`\nUnlike `conda`, `pip` is only a package manager, and it doesn't provide any virtual environment functions. The default virtual environment tool for Python is `venv`. You may go to the official [document](https://docs.python.org/3/library/venv.html) for more infomation about `venv`.\n:::\n\n\n\n\n## Building identical environments\nSometimes people want to build identical environments. This is done by recording the versions of all packages in the current environments. When rebuilding Python will pull the recording out and install the packages of the speicific versions.\n\nIn the process, there are two steps. First generate the pacakge list. Second create an environment based on the list.\n\n### Create lists\n\n1. [`pipreqs`](https://pypi.org/project/pipreqs/): This is a package that reads the `.py` files in your working directory and analyzes what packages you need based on the import. To use it, you simply type `pipreqs` in the project directory, and `requirements.txt` will be generated automatically. If the file already exists, you may use `pipreqs --force` to override the original `requirements.txt`. \n\n\n\n\n\n\n::: {.callout-note collapse='true'}\nThe classic popular way is `requirement.txt`, which is generated by `pip`. However the way that `pip freeze` works is very lazy and it will cause many issues. That's why at the moment it is recommended to use other methods.\n\n```{.bash}\npip freeze > requirements.txt\n```\n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n2\n```\n:::\n:::\n\n\n## `mamba`\n[`mamba`](https://github.com/mamba-org/mamba) is a reimplementation of the `conda` package manager in `C++`. It can be installed directly from `conda-forge`. \n\n```{.bash}\nconda install -c conda-forge mamba\n```\nAfter you install it in one of your environment, you may use it in all your environments.\n\n`mamba` can be treated as a drop-in replacement of `conda`. All commands we mentioned above can be rewritten by replacing `conda` with `mamba`. One of the reasons to use `mamba` over `conda` is that `mamba` runs so much faster than `conda`.\n\n",
    "supporting": [
      "virtenv_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}