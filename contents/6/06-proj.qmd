
## Projects
Problems are based on @Swe2020.

::: {#exr-}
## Comma Code
Say you have a list value like this: `spam = ['apples', 'bananas', 'tofu', 'cats']`. 

Write a function that takes a list value as an argument and returns a string with all the items separated by a comma and a space, with `and` inserted before the last item. For example, passing the previous `spam` list to the function would return 'apples, bananas, tofu, and cats'. But your function should be able to work with any list value passed to it. Be sure to test the case where an empty list `[]` is passed to your function.
:::


::: {#exr-}
## Fantasy Game Inventory
You are creating a fantasy video game. The data structure to model the player’s inventory will be a dictionary where the keys are string values describing the item in the inventory and the value is an integer value detailing how many of that item the player has. For example, the dictionary value `{'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}` means the player has 1 rope, 6 torches, 42 gold coins, and so on.

Write a function named `displayInventory()` that would take any possible `inventory` and display it like the following:

```{python}
#| eval: false
Inventory:
12 arrow
42 gold coin
1 rope
6 torch
1 dagger
Total number of items: 62
```

Note that this is the function version of @exr-fantasyinventorycode.
:::



::: {#exr-}
Create a Car class with two instance attributes:

1. `.color`, which stores the name of the car’s color as a string.
2. `.mileage`, which stores the number of miles on the car as an integer.

Then instantiate two Car objects — a blue car with 20,000 miles and a red car with 30,000 miles — and print out their colors and mileage. Your expected output are below:

```{python}
#| echo: false
class mycar():
    def __init__(self, color=None, mileage=None):
        self.color = color
        self.mileage = mileage
    
    def __str__(self):
        return 'A {} car with {} mileage.'.format(self.color, self.mileage)
```

```{python}
car1 = mycar(color='blue', mileage=20000)
car2 = mycar(color='red', mileage=30000)

print(car1)
print(car2)
```


:::



::: {#exr-}
Create a `GoldenRetriever` class that inherits from the `Dog` class. Give the `sound` argument of `GoldenRetriever.speak()` a default value of `Bark`. Use the following code for your parent `Dog` class:

```{python}
class Dog:
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name} is {self.age} years old"

    def speak(self, sound):
        return f"{self.name} says {sound}"
```

:::