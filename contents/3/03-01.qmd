## Basics

The basic data structure for `numpy` is `numpy.ndarray`. You may treat it as a generalized version of lists. However it can do so much more than the build-in `list`. 

To use `numpy`, we just import it. In most cases you would like to use the alias `np`.

```{python}
#| eval: false
import numpy as np
```


::: {.callout-note}
In many cases, `numpy.ndarray` is a huge object since it stores tons of data. Therefore many of the operations related to `numpy.ndarray` are "in-place" by default. This means that if you don't explicitly ask for a copy, there will be only one copy of the array and all later operations make changes to the original one. 

However there are many cases that 
:::

### Create `np.ndarray`

- convert a list into a numpy array.
- `np.zeros`, `np.zeros_like`
- `np.ones`, `np.ones_like`
- `np.eye`
- `np.random.rand`
- `np.arange`
- `np.linspace`

::: {.callout-note}
Please be very careful about the format of the input. For example, when you want to specify the dimension of the array, using `np.zeros`, you need to input a `tuple`. On the other hand, when using `np.random.rand`, you just directly input the dimensions one by one.

```{python}
#| eval: false
import numpy as np

np.zeros((3, 2))
np.random.rand(3, 2)
```

In this case, the official documents are always your friend.
:::



### Mathematical and Statistical Methods

- `+`, `-`, `*`, `/`, `**`, etc.. 
- `np.sin`, `np.exp`, `np.sqrt`, etc..

- `mean`, `sum`, `std`, `var`, `cumsum`
- `max` and `min`
- `maximum` and `minimum`
- `argmin` and `argmax`

- `np.sort`
- `np.unique`, `np.any`

- `np.dot`: Matrix multiplication
- `np.concatenate`

- Broadcast


::: {#exm-}
## Axis
Given `A = np.array([[1,2],[3,4]])` and `B = np.array([[5,6],[7,8]])`, please use `np.concatenate` to concatencate these two matrices to get a new matrix, in the order:

- `A` left, `B` right
- `A` right, `B` left
- `A` up, `B` down
- `A` down, `B` up
:::


### Common attributes and methods

- `shape`
- `dtype`
- `ndim`
- Any arithmetic operations between equal-size arrays applies the operation element-wise. 



::: {#exm-}
`MNIST` is a very famous dataset of hand written images. Here is how to load it. Note that in this instance of the dataset the data are stored as `numpy` arraies.
```{python}
#| eval: false
import tensorflow as tf

(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()
X_train.shape
```

:::


