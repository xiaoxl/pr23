## Basics

The basic data structure for `numpy` is `numpy.ndarray`. You may treat it as a generalized version of lists. However it can do so much more than the build-in `list`. 

To use `numpy`, we just import it. In most cases you would like to use the alias `np`.

```{python}
#| eval: false
import numpy as np
```


::: {.callout-note}
In many cases, `numpy.ndarray` is a huge object since it stores tons of data. Therefore many of the operations related to `numpy.ndarray` are "in-place" by default. This means that if you don't explicitly ask for a copy, there will be only one copy of the array and all later operations make changes to the original one. 

However there are many cases that 
:::

## Create `np.ndarray`

- convert a list into a numpy array.
- `np.zeros`, `np.zeros_like`
- `np.ones`, `np.ones_like`
- `np.eye`
- `np.random.rand`
- `np.arange`
- `np.linspace`

::: {.callout-note}
Please be very careful about the format of the input. For example, when you want to specify the dimension of the array, using `np.zeros`, you need to input a `tuple`. On the other hand, when using `np.random.rand`, you just directly input the dimensions one by one.

```{python}
#| eval: false
import numpy as np

np.zeros((3, 2))
np.random.rand(3, 2)
```

In this case, the official documents are always your friend.
:::



## Mathematical and Statistical Methods

- `+`, `-`, `*`, `/`, `**`, etc.. 
- `np.sin`, `np.exp`, `np.sqrt`, etc..

- `mean`, `sum`, `std`, `var`, `cumsum`
- `max` and `min`
- `maximum` and `minimum`
- `argmin` and `argmax`

- `np.sort`
- `np.unique`, `np.any`

- `np.dot`: Matrix multiplication
- `np.concatenate`

- Broadcast


::: {#exm-}
## Axis
Given `A = np.array([[1,2],[3,4]])` and `B = np.array([[5,6],[7,8]])`, please use `np.concatenate` to concatencate these two matrices to get a new matrix, in the order:

- `A` left, `B` right
- `A` right, `B` left
- `A` up, `B` down
- `A` down, `B` up
:::


## Common attributes and methods

- `shape`
- `dtype`
- `ndim`
- Any arithmetic operations between equal-size arrays applies the operation element-wise. 



::: {#exm-}
`MNIST` is a very famous dataset of hand written images. Here is how to load it. Note that in this instance of the dataset the data are stored as `numpy` arraies.
```{python}
#| eval: false
import tensorflow as tf

(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()
X_train.shape
```

:::

## Basic indexing and slicing

First see the following example.


::: {#exm-}
```{python}
import numpy as np
arr = np.arange(10)

print(arr[5])
print(arr[5:8])

arr[5:8] = 12
print(arr)

print(arr[5:8:2])
print(arr[8:5:-1])
print(arr[::-1])
```
:::


To do slicing in higher dimensional case, you may either treat a `numpy` array as a nested list, or you may directly work with it with multiindexes.


::: {#exm-}

```{python}
import numpy as np
arr3d = np.arange(12).reshape(2, 2, 3)

print('case 1:\n {}'.format(arr3d))
print('case 2:\n {}'.format(arr3d[0, 1, 2]))
print('case 3:\n {}'.format(arr3d[:, 0: 2, 1]))
print('case 4:\n {}'.format(arr3d[:, 0: 2, 1:2]))
```

:::


## Boolean Indexing
`numpy` array can accept index in terms of numpy arries with boolean indexing.


::: {#exm-}

```{python}
import numpy as np
a = np.arange(4)
b = np.array([True, True, False, True])
print(a)
print(b)
print(a[b])
```
:::

We could combine this way with the logic computation to filter out the elements we don't want.


::: {#exm-}
Please replace the odd number in the array by its negative.

```{python}
import numpy as np
arr = np.arange(10)
odd = arr %2 == 1
arr[odd] = arr[odd] * (-1)

print(arr)
```


:::

## Fancy indexing
Fancy indexing is a term adopted by NumPy to describe indexing using integer arrays. 

::: {#exm-}

```{python}
import numpy as np

arr = np.zeros((8, 4))
for i in range(8):
    arr[i] = i

arr[[4, 3, 0, 6]]
```

:::

::: {#exm-}

```{python}
import numpy as np

arr = np.arange(32).reshape((8, 4))
print(arr)
print(arr[[1, 5, 7, 2], [0, 3, 1, 2]])
print(arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]])
```

:::


## [Copies and views](https://numpy.org/doc/stable/user/basics.copies.html)
The view of an numpy array is a way to get access to the array without copying internel data. When operating with a view, the original data as well as all other views of the original data will be modified simutanously. 

The default setting for copies and views is that, basic indexing and slicing will make views, and advanced indexing and slicing (e.g. boolean indexing, fancy indexing, etc.) will make copies. For other operations, you need to check the documents to know how they work. For example, `np.reshape` creates a view where possible, and `np.flatten` always creates a copy.

You may use `np.view()` or `np.copy()` to make views or copies explicitly. 
::: {#exm-}

```{python}
import numpy as np
arr = np.arange(10)
b = arr[5:8]
print('arr is {}'.format(arr))
print('b is {}'.format(b))

b[0] = -1
print('arr is {}'.format(arr))
print('b is {}'.format(b))


arr[6] = -2
print('arr is {}'.format(arr))
print('b is {}'.format(b))

print('The base of b is {}'.format(b.base))
```
:::


The way to make explicit copy is `.copy()`.


::: {#exm-}

```{python}
import numpy as np
arr = np.arange(10)
b = arr[5:8].copy()
print('arr is {}'.format(arr))
print('b is {}'.format(b))

b[0] = -1
print('arr is {}'.format(arr))
print('b is {}'.format(b))


arr[6] = -2
print('arr is {}'.format(arr))
print('b is {}'.format(b))

print('The base of b is {}'.format(b.base))
```
:::


## More commands

- `.T`
- `axis=n` is very important.
- `np.reshape()`
- `np.tile()`
- `np.repeat()`


## More advanced commands

- `np.where()`
- `np.any()`
- `np.all()`
- `np.argsort()`




::: {#exm-}
Get the position where elements of `a` and `b` match.

```{python}
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

np.where(a == b)
```

:::

::: {#exm-}

```{python}
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

np.where(a == b, a*2, b+1)
```

:::


::: {#exm-}
## Playing with axis


```{python}
import numpy as np
a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])

np.any(a==1, axis=0)
np.any(a==1, axis=1)
np.any(a==1, axis=2)


np.any(a==2, axis=0)
np.any(a==2, axis=1)
np.any(a==2, axis=2)

np.any(a==5, axis=0)
np.any(a==5, axis=1)
np.any(a==5, axis=2)
```


:::


## Examples
::: {#exm-}
## Random walks
Adam walks randomly along the axis. He starts from `0`. Every step he has equal possibility to go left or right. Please simulate this process.

Use `choices` to record the choice of Adam at each step. We may generate a random array where `0` represents left and `1` represents right.

Use `positions` to record the position of Adam at each step. Using `choices`, the position is `+1` if we see a `1` and the position is `-1` if we see a `0`. So the most elegent way to perform this is to 

1. Convert `choices` from `{0, 1}` to `{-1, 1}`.
2. To record the starting position, we attach `0` to the beginning of the new `choices`.
3. Apply `cumsum` to `choices` to get `positions`.

```{python}
import numpy as np

step = 30
choices = np.random.randint(2, size=step)
choices = choices * 2 - 1
choices = np.concatenate(([0], choices))
positions = choices.cumsum()

import matplotlib.pyplot as plt
plt.plot(positions)
```
:::

::: {#exm-}
## Many random walks
We mainly use `numpy.ndarray` to write the code in the previous example. The best part here is that it can be easily generalized to many random walks.

Still keep `choices` and `positions` in mind. Now we would like to deal with multiple people simutanously. Each row represents one person's random walk. All the formulas stay the same. We only need to update the dimension setting in the previous code.

- Update `size` in `np.random.randint`.
- Update `[0]` to `np.zeros((N, 1))` in `concatenate`.
- For `cumsum` and `concatenate`, add `axis=1` to indicate that we perform the operations along `axis 1`.
- We plot each row in the same figure. `plt.legend` is used to show the label for each line.

```{python}
import numpy as np

step = 30
N = 3
choices = np.random.randint(2, size=(N, step))
choices = choices * 2 - 1
choices = np.concatenate((np.zeros((N, 1)), choices), axis=1)
positions = choices.cumsum(axis=1)

import matplotlib.pyplot as plt
for row in positions:
    plt.plot(row)
plt.legend([1, 2, 3])
```
:::


::: {#exm-}
## Analyze `positions`
We play with the numpy array `positions` to get some information about the random walks of three generated in the previous example.

- The maximal position:

```{python}
positions.max()
```
- The maximal position for each one:

```{python}
positions.max(axis=1)
```
- The maximal position across all three for each step:

```{python}
positions.max(axis=0)
```
- Check whether anyone once got to the position 3:

```{python}
(positions>=3).any(axis=1)
```
- The number of people who once got to the position 3: 

```{python}
(positions>=3).any(axis=1).sum()
```
- Which step for each one gets to the right most position: 

```{python}
positions.argmax(axis=1)
```


:::