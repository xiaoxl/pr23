
## Examples
::: {#exm-}
## Random walks
Adam walks randomly along the axis. He starts from `0`. Every step he has equal possibility to go left or right. Please simulate this process.

Use `choices` to record the choice of Adam at each step. We may generate a random array where `0` represents left and `1` represents right.

Use `positions` to record the position of Adam at each step. Using `choices`, the position is `+1` if we see a `1` and the position is `-1` if we see a `0`. So the most elegent way to perform this is to 

1. Convert `choices` from `{0, 1}` to `{-1, 1}`.
2. To record the starting position, we attach `0` to the beginning of the new `choices`.
3. Apply `cumsum` to `choices` to get `positions`.

```{python}
import numpy as np

step = 30
choices = np.random.randint(2, size=step)
choices = choices * 2 - 1
choices = np.concatenate(([0], choices))
positions = choices.cumsum()

import matplotlib.pyplot as plt
plt.plot(positions)
```
:::

::: {#exm-}
## Many random walks
We mainly use `numpy.ndarray` to write the code in the previous example. The best part here is that it can be easily generalized to many random walks.

Still keep `choices` and `positions` in mind. Now we would like to deal with multiple people simutanously. Each row represents one person's random walk. All the formulas stay the same. We only need to update the dimension setting in the previous code.

- Update `size` in `np.random.randint`.
- Update `[0]` to `np.zeros((N, 1))` in `concatenate`.
- For `cumsum` and `concatenate`, add `axis=1` to indicate that we perform the operations along `axis 1`.
- We plot each row in the same figure. `plt.legend` is used to show the label for each line.

```{python}
import numpy as np

step = 30
N = 3
choices = np.random.randint(2, size=(N, step))
choices = choices * 2 - 1
choices = np.concatenate((np.zeros((N, 1)), choices), axis=1)
positions = choices.cumsum(axis=1)

import matplotlib.pyplot as plt
for row in positions:
    plt.plot(row)
plt.legend([1, 2, 3])
```
:::


::: {#exm-}
## Analyze `positions`
We play with the numpy array `positions` to get some information about the random walks of three generated in the previous example.

- The maximal position:

```{python}
positions.max()
```
- The maximal position for each one:

```{python}
positions.max(axis=1)
```
- The maximal position across all three for each step:

```{python}
positions.max(axis=0)
```
- Check whether anyone once got to the position 3:

```{python}
(positions>=3).any(axis=1)
```
- The number of people who once got to the position 3: 

```{python}
(positions>=3).any(axis=1).sum()
```
- Which step for each one gets to the right most position: 

```{python}
positions.argmax(axis=1)
```


:::