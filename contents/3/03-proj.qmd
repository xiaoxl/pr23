
## Projects




::: {#exr-}
## Adding one axis
Please download [this file](assests/img/20220824224849.png).   

1. Please use `matplotlib.pyplot.imread()` to read the file as a 3D numpy array.
2. Check the shape of the array.
3. Add one additional axis to it as axis 0 to make it into a 4D array. 
:::


::: {#exr-}
## Random
Please finish the following tasks. 

1. Use the package `np.random` to flip a coin 100 times and record the result in a list `coin`.
2. Assume that the coin is not fair, and the probability to get `H` is `p`. Write a code to flip the coin 100 times and record the result in a list `coin`, with a given parameter `p`. You may use `p=.4` as the first choice.
3. For each list `coin` created above, write a code to find the longest `H` streak. We only need the biggest number of consecutive `H` we get during this 100 tosses. It is NOT necessary to know when we start the streak.
:::


<details>
<summary>Click for Hint.</summary>

::: {.solution}
The following ideas can be used to solve the problem.

- `np.where`
- string, `split` and `join`
:::

</details>



::: {#exr-}
## Bins
Please read the [document of `np.digitize`](https://numpy.org/doc/stable/reference/generated/numpy.digitize.html#numpy-digitize), and use it to do the following task.

Set the following bins:

- Less than `3`: `small`
- `3-5`: `medium`
- Bigger than `5`: `large`

Please transform the following data `iris_2c` into texts using the given bins.

```{python}
import numpy as np
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2c = np.genfromtxt(url, delimiter=',', dtype='object')[:, 2].astype('float')
```
:::



::: {#exr-}
Consider a 2D numpy array `a`. 

```{python}
import numpy as np
a = np.random.rand(5, 5)
```

1. Please sort it along the 3rd column.
2. Please sort it along the 2nd row.
:::


<details>
<summary>Click for Hint.</summary>

::: {.solution}
Please use `np.argsort` for the problem.
:::
</details>


::: {#exr-}
## One-hot vector
Compute the one-hot encodings of a given array. You may use the following array as a test example. In this example, there are `3` labels. So the one-hot vectors are 3 dimensional vectors.

For more infomation about one-hot encodings, you may check the [Wiki page](https://en.wikipedia.org/wiki/One-hot#Machine_learning_and_statistics). You are not allowed to use packages that can directly compute the one-hot encodings for this problem. 

```{python}
import numpy as np
arr = np.random.randint(1,4, size=6)
```

:::



::: {#exr-}
From the given 1d array `arr = np.arange(15)`, generate a 2d matrix using strides, with a window length of `4` and strides of `2`, like `[[0,1,2,3], [2,3,4,5], [4,5,6,7]..]`.
:::