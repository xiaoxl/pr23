## Examples

### WHO TB dataset
Let us explore the tuberculosis cases data. The dataset is provided by WHO and can be downloaded from [here](https://www.who.int/teams/global-tuberculosis-programme/data). `tidyr` also provides the dataset. You may directly get the dataset after you load `tidyr` from `tidyverse`. The variable description can be found from [`tidyr` documentations](https://tidyr.tidyverse.org/reference/who.html).


```{r}
library(tidyverse)
who
```
Based on the description of varaibles, we understand that

1. `country`, `iso2`, `iso3` are all refered to country names (and thus they are redundant).
2. Columns after `year`, like `new_sp_m014` etc., are counts of new TB cases recorded by groups. The code has three parts, most of which are separated by `_` (but there are some exceptions). 
    - The first part is always `new`.
    - The second part is a code for method of diagnosis:
        - `rel` = relapse,
        - `sn` = negative pulmonary smear,
        - `sp` = positive pulmonary smear, 
        - `ep` = extrapulmonary.
    - The third part is a code for gender (`f` = female, `m` = male) and a code for age group:
        - `014` = 0-14 yrs of age, 
        - `1524` = 15-24 years of age, 
        - `2534` = 25 to 34 years of age,
        - `3544` = 35 to 44 years of age,
        - `4554` = 45 to 54 years of age,
        - `5564` = 55 to 64 years of age,
        - `65` = 65 years of age or older

Therefore to clean the data, we need the following steps.


::: {#exm-}
Gather together all the columns from `new_sp_m014` to `newrel_f65`.

::: {.callout-tip collapse='true'}

```{r}
wholonger <- who %>% pivot_longer(cols=5:60, names_to='group', values_to='counts')
```

:::

:::


Then we use `stringr::str_replace()` to replace `newrel` by `new_rel`.

```{r}
wholonger2 <- wholonger %>% mutate(key=str_replace(group, 'newrel', 'new_rel'))
```


::: {#exm-}
Parse the column `group` into columns.

::: {.callout-tip collapse='true'}

```{r}
wholonger3 <- wholonger2 %>% 
        separate(key, into=c('new', 'type', 'genderage'), sep='_') %>% 
        separate(genderage, into=c('gender', 'age'), sep=1)
```
:::
:::



::: {#exm-}
Pick the columns that matters.

::: {.callout-tip collapse='true'}

```{r}
tidywho <- wholonger3[c('country', 'year', 'type', 'gender', 'age', 'counts')]
```

:::
:::


We could use the pipe symbol to connect all the above steps.


::: {.callout-tip collapse='true'}

```{r}
tidywho <- who %>% 
    pivot_longer(cols=5:60, names_to='group', values_to='counts') %>% 
    mutate(key=str_replace(group, 'newrel', 'new_rel')) %>% 
    separate(key, into=c('new', 'type', 'genderage'), sep='_') %>% 
    separate(genderage, into=c('gender', 'age'), sep=1) %>% 
    select('country', 'year', 'type', 'gender', 'age', 'counts')
```

:::



### US Babynames

Let us use R to solve the babynames dataset again. 

The first task is to read those files.


::: {#exm-}
Please read files and put the data into one tibble. The dataset can be downloaded from [here](assests/datasets/babynames.zip) as a zip file.

```{r}
#| echo: false
#| output: false
library(tidyverse)
```

::: {.callout-tip collapse="true"}


```{r}
path <- 'assessts/datasets/babynames/yob'
dfs <- map(1880:2010, function(y){
    filepath <- paste0(path, as.character(y), '.txt')
    df_individual <- tibble(read.csv(filepath, header=FALSE))
    names(df_individual) <- c('name', 'gender', 'counts')
    df_individual$year <- y
    df_individual
})
df <- bind_rows(dfs)
```
:::
:::



::: {#exm-}
Please plot the total births by gender and year.

::: {.callout-tip collapse="true"}

```{r}
df %>% 
    group_by(gender, year) %>% 
    summarize(total_num=sum(counts)) %>% 
    ggplot() +
        geom_line(mapping = aes(x=year, y=total_num, color=gender))

```

:::

:::


::: {#exm-}
Please compute the proportions of each name relateive to the total number of births per year per gender. 

::: {.callout-tip collapse='true'}

```{r}
df %>% 
    group_by(gender, year) %>% 
    mutate(prop=counts/sum(counts))
```

:::
:::



::: {#exm-}
We would like to keep the first 100 names (by counts) in each year and save it as a new tibble `top100`.

::: {.callout-tip collapse="true"}

```{r}
top100 <- df %>% 
        group_by(gender, year) %>% 
        top_n(100, wt=counts)
```

:::
:::


::: {#exm-}
Please draw the trend of `John`, `Harry`, `Mary` in `top100` by counts.

::: {.callout-tip collapse="true"}

```{r}
namelist <- c('John', 'Harry', 'Mary')
top100 %>% 
    filter(name %in% namelist) %>% 
    ggplot() +
        geom_line(mapping=aes(x=year, y=counts, color=name))
```

:::
:::


::: {#exm-}
Now we would like to analyze the ending of names. Please get a `tibble` that contains the counts of ending letter per year per gender. We mainly focus on 1910, 1960 and 2010.

::: {.callout-tip collapse="true"}

```{r}
#| warning: false
df %>% 
    filter(year %in% c(1910, 1960, 2010)) %>% 
    mutate(ending=str_sub(name, -1, -1)) %>% 
    group_by(gender, year, ending) %>% 
    summarise(ending_counts=sum(counts)) %>% 
    ggplot() +
        geom_bar(
            mapping = aes(
                x=ending, 
                y=ending_counts, 
                fill=year,
                group=year
                ), 
            stat = "identity", 
            position = "dodge",
        ) +
        facet_wrap(~gender, nrow=2)
```

:::
:::


::: {#exm-}
Please draw the line plot to show the trending of certain letters through years. Here we choose `d`, `n` and `y`.



::: {.callout-tip collapse="true"}

```{r}
#| warning: false
df %>% 
    mutate(ending=str_sub(name, -1, -1)) %>% 
    group_by(year, ending) %>% 
    summarise(ending_counts=sum(counts)) %>% 
    filter(ending %in% c('d', 'n', 'y')) %>% 
    ggplot() +
        geom_line(
            mapping = aes(
                x=year, 
                y=ending_counts, 
                color=ending
            )
        )
```

:::
:::