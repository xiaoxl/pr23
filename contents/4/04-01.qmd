




## Basic `pandas`

###  `Series` and `DataFrame`
A *Series* is a 1-d array-like object which has index. The default index is starting from `0`. You may change the index to be something assigned by you. Thus it can be treated as a generalization of a `dict`.

```{python}
#| echo: false
import pandas as pd
```
```{python}
obj = pd.Series([3, 1, 2, 4])
obj
```
```{python}
obj2 = pd.Series([3, 1, 2, 4], index=['a', 'b', 'c', 'd'])
obj2
```
```{python}
data3 = {'a': 3, 'b': 1, 'c': 2, 'd': 4}
obj3 = pd.Series(data3)
obj3
```

A *DataFrame* represents a rectangular table of data and contains an ordered collection of columns, each of which can be a different value type. The DataFrame has both a row and column index; it can be thought of as a dict of Series all sharing the same index. When displaying a DataFrame, we may use `.head()` to just display the first few rows for efficicy. 

```{python}
import pandas as pd

data = {'a': [1, 2, 3, 4, 5, 6, 7],
        'b': [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1],
        'c': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}
df = pd.DataFrame(data)
df.head()
```


::: {.callout-note}
We may use the setting `columns=` or `index=` as well as the methods `.rename(columns=, index=)` to change the column names and the index names. See the following example.

```{python}
import numpy as np
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
```

:::

### Accessing data
- A column in a DataFrame can be retrieved as a Series either by dict-like notation or by attribute. What one gets from this is a Series object.
    - dict-like notation: `df['a']`
    - by attribute: `df.a`. Note that if the name of the column is not suitable for attribute names, this method doesn't work.
- Rows are retrieved by `.loc` if using the row index, and by `.iloc` if using the row number.

### Updating data
- Assign values to a column of a DataFrame will update that column. If the column doesn't exist, new column will be created.
- When assign values with non-existent row index, that part of the data will be discarded. 
- Any time if there are no values with a specific column and row, it will show as `NaN`. 

::: {#exm-}

```{python}
import pandas as pd

data = {'a': [1, 2, 3, 4],
        'b': [1.1, 2.1, 3.1, 4.1],
        'c': ['a', 'b', 'c', 'd']}
df = pd.DataFrame(data)

newcol = {1: 'good', 3: 'better', 5: 'best'}
df['d'] = pd.Series(newcol)
df
```

:::


### Indexing, Selection, and Filtering

- Series indexing `(obj[...])` works analogously to NumPy array indexing, except you
can use the Seriesâ€™s index values instead of only integers. 





- We can use logical expresssion to filter DataFrame.


```{python}
import pandas as pd

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
data[data['one']>5]
```


- `.loc`, `.iloc`

```{python}
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
print(data.loc['Colorado', ['two', 'three']])
print(data.iloc[2, [3, 0, 1]])
```

- Slicing with labels behaves differently than normal Python slicing in that the endpoint is inclusive. 

```{python}
import pandas as pd

obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
obj['b':'c']
```


- Reindex `.reindex()`:
```{python}
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

data.reindex(index = ['Colorado', 'Arkansas', 'New York'],
             columns = ['three', 'five', 'one'])
```


::: {.callout-note}
`.loc` and `.reindex` are very similar to each other. The main difference between theses two is that `.loc` will return a view and `.reindex` will return a copy in most cases.
:::


::: {.callout-note}
When locate data using indexes, duplicate labels will return all results.
:::




### Essential functions
- Arithmetic and Data Alignment
Elements of the same index and columns will be computed. By default, if any entry is `nan`, the answer will be `nan`. You may use `fill_value` argument to fill the empty slots.


::: {#exm-}

```{python}
import pandas as pd
import numpy as np
df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list('abcd'))
df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde'))
df2.loc[1, 'b'] = np.nan

df1.add(df2, fill_value=0)
```

:::

Relatedly, when reindexing a Series or DataFrame, you can also specify a `fill_value`.

### Function Application and Mapping
We may apply functions to each row/column of a DataFrame. If the function is built-in function that is compatible with DataFrame, you can directly call the function that it will be applied automatically to each row/column. If it is not, we can call `apply` to get the desired result. 


::: {#exm-}

```{python}
import pandas as pd
data = pd.DataFrame(np.random.rand(4, 4),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

f = lambda x: x.max() - x.min()

print(data.apply(f))
print(data.apply(f, axis='columns'))
```

:::


We can use more complicated function to get more complicated result.

::: {#exm-}

```{python}
import pandas as pd
data = pd.DataFrame(np.random.rand(4, 4),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

f = lambda x: pd.Series([x.max(), x.min()], index=['max', 'min'])

print(data.apply(f))
```

:::


### Sorting and Ranking

- `.sort_values(by=)`
- `.rank(ascending=, method=)`




### Summarizing and Computing Descriptive Statistics

- `sum`, `cumsum`
- `mean`, `median`
- `.describe()`
- `.cov`, `.corr`

### Unique Values, Value Counts, and Membership
- `unique`
- `value_counts`



### Reading and Writing Data in Text Format
- `read_csv`
- `read_excel`
- `df.to_csv`


### Copies and views

- `inplace`
