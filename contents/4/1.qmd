




## Basic `pandas`

###  `Series` and `DataFrame`
A *Series* is a 1-d array-like object which has index. The default index is starting from `0`. You may change the index to be something assigned by you. Thus it can be treated as a generalization of a `dict`.

```{python}
#| echo: false
import pandas as pd
```
```{python}
obj = pd.Series([3, 1, 2, 4])
obj
```
```{python}
obj2 = pd.Series([3, 1, 2, 4], index=['a', 'b', 'c', 'd'])
obj2
```
```{python}
data3 = {'a': 3, 'b': 1, 'c': 2, 'd': 4}
obj3 = pd.Series(data3)
obj3
```

A *DataFrame* represents a rectangular table of data and contains an ordered collection of columns, each of which can be a different value type. The DataFrame has both a row and column index; it can be thought of as a dict of Series all sharing the same index. When displaying a DataFrame, we may use `.head()` to just display the first few rows for efficicy. 

```{python}
import pandas as pd

data = {'a': [1, 2, 3, 4, 5, 6, 7],
        'b': [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1],
        'c': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}
df = pd.DataFrame(data)
df.head()
```


::: {.callout-note}
We may use the setting `columns=` or `index=` as well as the methods `.rename(columns=, index=)` to change the column names and the index names. See the following example.

```{python}
import numpy as np
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
```

:::






## Indexing
The act of selecting rows or columns to access from a dataframe or series is called *indexing*. 

### `[]`

::: {.callout-note collapse=true}
## `Series[]`

```{python}
#| echo: false

from IPython.display import Markdown
import pandas as pd
from tabulate import tabulate
table = [['`Series[label]`', 'scalar value'],
         ['`Series[list of labels]`', '`Series` corresponding to labels'],
         ['`Series[slice]`', '`Series` corresponding to the slice'],
         ['`Series[boolean vector]`', '`Series` corresponding to the boolean vector']]
        #  ['DataFrame', '`dateframe[colname]`', '`Series` corresponding to colname'],
        #  ['DataFrame', '`dataframe[list of colnames]`', '`DataFrame` corresponding to colnames']]
# table = {"Object Type": ['Series', 'DataFrame'],
        #  "Selection": ['`series[label]`', '`dateframe[colname]`'],
        #  "Return Value Type": ['scalar value', '`Series` corresponding to colname']}
# Markdown(pd.DataFrame(table))
# df = pd.DataFrame(table)
Markdown(tabulate(table, headers=["Input value type",
                                  "Return Value Type" ]))
```

1. For `Series`, values are accessed by labels, not positions. Since `Series` are usually considered as a column, you may think these labels as row indexes. 

2. When using slice, things becomes more complicated. There are two ways of using slice. You may either slice by positions, or slice by labels. The main differences between them is that:

- slice by positions `Series[i:j]` doesn't contain the last index `Series[j]`;
- slice by labels `Sereies[I:J]` contains the last label `Series[J]`.

3. Sometimes the labels of a series are integers, but different than the position indexes. In `pandas 1.5.1`, slice by positions takes priority. However the whole scenario is very confusing, and this will be changed in future versions. In this cases it is recommanded to use `.loc` and `.iloc`.  

4. When indexing using boolean vector, the vector should be of the same length as the `Series`. In other words, it works as the boolean bector shows which row is selected.

See some examples below.


::: {#exm-}

```{python}
import pandas as pd

example = pd.Series({'a': 1.1, 'b': 2.2, 'c': 3.3, 'd': 4.4})
example
```

```{python}
example['b']
```

```{python}
example[['b', 'a']]
```

```{python}
example[0:2]
```

```{python}
example['a':'c']
```


```{python}
example[[True, False, True, False]]
```


:::

:::


::: {.callout-note collapse=true}
## `DataFrame[]`
```{python}
#| echo: false

from IPython.display import Markdown
import pandas as pd
from tabulate import tabulate
table = [[ '`DataFrame[colname]`', 'The column corresponding to colname as a `Series`'],
         ['`DataFrame[list-of-colnames]`', 'The columns of `DataFrame` corresponding to colnames'],
         ['`DataFrame[slice]`', 'The rows of `DataFrame` corresponding to the slice' ],
         ['`DataFrame[boolean list]`', '`DataFrame` corresponding to the boolean list']]
# table = {"Object Type": ['Series', 'DataFrame'],
        #  "Selection": ['`series[label]`', '`dateframe[colname]`'],
        #  "Return Value Type": ['scalar value', '`Series` corresponding to colname']}
# Markdown(pd.DataFrame(table))
# df = pd.DataFrame(table)
Markdown(tabulate(table, headers=["Input value type",
                                  "Return Value Type" ]))
```

1. Slice for `DataFrame` behaves exactly like slice for `Series`, that it is selecting rows, and it works for both labels and positions. Similarly, slicing by positions are not recommended and might be deprecated in the future. 
2. On the other hand side, selecting rows are usually related to querying. Therefore it is better not to focus on slicing.
3. Inside `[]`, one column name and a list of columna names will result totally different objects: one is a `Series` and the other is a `DataFrame`. 
4. In prior versions, using `[list-of-colnames]` would work as long as *at least* 1 of the keys was found (otherwise it would raise a `KeyError`). This behavior was changed and will now raise a `KeyError` if at least one label is missing. The recommended alternative is to use `.reindex()`.
5. When indexing using boolean vector, the vector should be of the same length as the number of rows of the `DataFrame`. In other words, it works as the boolean bector shows which row is selected.
6. Using `[]` for `DataFrame` cannot give you a single value, since what are inside `[]` is always treated as a row index or a column index. If you want to get access to the value of a single cell by both row index and column index, use other method like `.loc[]`.
7. If the column name is eligible for attributes, you may also use `df.a` to represent `df['a']` for simplicity.

::: {#exm-}

```{python}
import pandas as pd

example = pd.DataFrame({'a': [1.1, 2.2], 'b': [2.2, 3.3], 'c': [3.3, 4.4]})
example
```

```{python}
example['a']
```

```{python}
example.a
```

```{python}
example[['a']]
```


```{python}
example[0:1]
```


```{python}
example[[False, True]]
```





:::

:::





### `.loc[]` and `.iloc[]`

`[]` contains several different types of ways to access data. `.loc[]` and `.iloc[]` are more specific. 

- `.loc[]` is to use labels to access data.
- `.iloc[]` is to use positions to access data.


:::{.callout-note collapse=true}
## Notes for `.loc[]` and `.iloc[]`

1. When there is only one index is specified, it is refered to rows. 
2. When using both indexes, the first is row index and the second is column index.
3. When selecting all rows/columns, you may put `:` in the corresponding place.
4. `df.loc[1, 'a']` refers to the cell in the DataFrame `df` whose row index is `1` and column index is `a`. `df[1, 'a']` refers to the column in the DataFrame `df` whose column name is `(1, 'a')`.
5. Many other small details are very similar to `[]`. For example, pay attention to the differences between `df.loc[:, 'a']` and `df.loc[:, ['a']]`.


::: {#exm-}


```{python}
import pandas as pd
example = pd.DataFrame({'a': [1.1, 2.2], 'b': [2.2, 3.3], 'c': [3.3, 4.4]})
example
```


```{python}
example.loc[1]
```


```{python}
example.loc[:, 'a']
```

```{python}
example.loc[1, 'a']
```

```{python}
example.iloc[0:1, 0:2]
```


```{python}
example.iloc[1, 0:2]
```

```{python}
example.iloc[[1], 0:2]
```
:::
:::















### Updating data
- Assign values to a column of a DataFrame will update that column. If the column doesn't exist, new column will be created.
- When assign values with non-existent row index, that part of the data will be discarded. 
- Any time if there are no values with a specific column and row, it will show as `NaN`. 

::: {#exm-}

```{python}
import pandas as pd

data = {'a': [1, 2, 3, 4],
        'b': [1.1, 2.1, 3.1, 4.1],
        'c': ['a', 'b', 'c', 'd']}
df = pd.DataFrame(data)

newcol = {1: 'good', 3: 'better', 5: 'best'}
df['d'] = pd.Series(newcol)
df
```

:::


### Indexing, Selection, and Filtering

- Series indexing `(obj[...])` works analogously to NumPy array indexing, except you
can use the Seriesâ€™s index values instead of only integers. 





- We can use logical expresssion to filter DataFrame.


```{python}
import pandas as pd

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
data[data['one']>5]
```


- `.loc`, `.iloc`

```{python}
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
print(data.loc['Colorado', ['two', 'three']])
print(data.iloc[2, [3, 0, 1]])
```

- Slicing with labels behaves differently than normal Python slicing in that the endpoint is inclusive. 

```{python}
import pandas as pd

obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
obj['b':'c']
```


- Reindex `.reindex()`:
```{python}
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

data.reindex(index = ['Colorado', 'Arkansas', 'New York'],
             columns = ['three', 'five', 'one'])
```


::: {.callout-note}
`.loc` and `.reindex` are very similar to each other. The main difference between theses two is that `.loc` will return a view and `.reindex` will return a copy in most cases.
:::


::: {.callout-note}
When locate data using indexes, duplicate labels will return all results.
:::




### Essential functions
- Arithmetic and Data Alignment
Elements of the same index and columns will be computed. By default, if any entry is `nan`, the answer will be `nan`. You may use `fill_value` argument to fill the empty slots.


::: {#exm-}

```{python}
import pandas as pd
import numpy as np
df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list('abcd'))
df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde'))
df2.loc[1, 'b'] = np.nan

df1.add(df2, fill_value=0)
```

:::

Relatedly, when reindexing a Series or DataFrame, you can also specify a `fill_value`.

### Function Application and Mapping
We may apply functions to each row/column of a DataFrame. If the function is built-in function that is compatible with DataFrame, you can directly call the function that it will be applied automatically to each row/column. If it is not, we can call `apply` to get the desired result. 


::: {#exm-}

```{python}
import pandas as pd
data = pd.DataFrame(np.random.rand(4, 4),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

f = lambda x: x.max() - x.min()

print(data.apply(f))
print(data.apply(f, axis='columns'))
```

:::


We can use more complicated function to get more complicated result.

::: {#exm-}

```{python}
import pandas as pd
data = pd.DataFrame(np.random.rand(4, 4),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])

f = lambda x: pd.Series([x.max(), x.min()], index=['max', 'min'])

print(data.apply(f))
```

:::


### Sorting and Ranking

- `.sort_values(by=)`
- `.rank(ascending=, method=)`




### Summarizing and Computing Descriptive Statistics

- `sum`, `cumsum`
- `mean`, `median`
- `.describe()`
- `.cov`, `.corr`

### Unique Values, Value Counts, and Membership
- `unique`
- `value_counts`



### Reading and Writing Data in Text Format
- `read_csv`
- `read_excel`
- `df.to_csv`


### Copies and views

- `inplace`




