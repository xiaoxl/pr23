
## Built-in Types: numeric types and `str` {#sec-path}

This section is based on @You2020.

There are several built-in data structures in Python. Here is an (incomplete) list:

- `None`
- Boolean -- `True`, `False`
- Numeric Types — `int`, `float`, `complex`
- Text Sequence Type — `str`
- Sequence Types — `list`
- Map type - `dict`

We will cover numeric types and strings in this section. The rests are either simple that are self-explained, or not simple that will be discussed later.



### Numeric types and math expressions
Numeric types are represented by numbers. If there are no confusions, Python will automatically detect the type. 
```{python}
x = 1 # x is an int.
y = 2.0 # y is a float.
```
Python can do math just like other programming languages. The basic math operations are listed as follows.

- `+`, `-`, `*`, `/`, `>`, `<`, `>=`, `<=` works as normal.
- `**` is the power operation.
- `%` is the mod operation.
- `!=` is `not equal`

### `str`
Scalars are represented by numbers and strings are represented by quotes. Example:
```{python}
x = 1       # x is a scalar.
y = 's'     # y is a string with one letter.
z = '0'     # z loos like a number, but it is a string.
w = "Hello" # w is a string with double quotes.
```
Here are some facts.

1. For strings, you can use either single quotes `'` or double quotes `"`.
2. `\` is used to denote escaped words. You may find the list [Here](https://www.w3schools.com/python/gloss_python_escape_characters.asp). 
3. There are several types of scalars, like `int`, `float`, etc.. Usually Python will automatically determine the type of the data, but sometimes you may still want to declare them manually.
4. You can use `int()`, `str()`, etc. to change types.

Although `str` is a built-in type, there are tons of tricks with `str`, and there are tons of packages related to strings. Generally speaking, to play with strings, we are interested in two types of questions.

- Put information together to form a string.
- Extract information from a string.
We briefly talk about these two tasks.



::: {.callout-note}
There is a very subtle relations between the variable / constant and the name of the variable / constant. We will talk about these later.
:::


::: {#exm-}
Here is an example of playing with strings. Please play with these codes and try to understand what they do.

```{python}
import re

def clean_strings(strings):
    result = []
    for value in strings:
        value = value.strip()
        value = re.sub('[!#?]', '', value)
        value = value.title()
        result.append(value)
    return result

states = [' Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda',
          'south carolina##', 'West virginia?']
print(clean_strings(states))
```

:::



::: {.callout-note collapse=true}
## The importance of documents


::: {#exm-}
## Sorting a list
Let `a=[3, 1, 2]` be a list. We would like to sort the list. There are two different build-in methods. 

```{python}
a = [3, 1, 2]
b = sorted(a)
b
```
The first method is straightforward and we get what we expected. However if we use the same idea, and write the codes in the following way, we will get something unexpected. 

```{python}
a = [3, 1, 2]
b = a.sort()
print(b)
```
`b` won't be directly printed since `b` is actually `None`. The way that `.sort()` works is that it sort the list inplace. In other words, the method doesn't have an output. It directly change the original list.

```{python}
a
```
:::


This is an example to show that similar functions may behaves differently. It is actually very hard to predict what would happen since it all depends on how the developer of the function thinks about the problems.

Therefore it is very important to know how to find references. Other than simply asking questions on StackOverflow or other forums, the official documents are always your good friend. For example, you may find the answer to the above problems from [`sorted`](https://docs.python.org/3/library/functions.html#sorted) and [`.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort).


:::