
## Exercises
Most problems are based on @Sha2017, @You2020, @Swe2020, @McK2017 and @Klo2021..


::: {#exr-}
## Indentation
Please tell the differences between the following codes. If you don't understand `for` don't worry about it. Just focus on the indentation and try to understand how the codes work.


```{python}
#| eval: false

for i in range(5):
    print('Hello world!')
print('Hello world!')
```

```{python}
#| eval: false

for i in range(5):
    print('Hello world!')
    print('Hello world!')
```

```{python}
#| eval: false

for i in range(5):
print('Hello world!')
print('Hello world!')
```

```{python}
#| eval: false

for i in range(5):
    pass
print('Hello world!')
print('Hello world!')
```
:::




::: {#exr-}
## Play with built-in data types

Please first guess the results of all expressions below, and then run them to check your answers.
```{python}
#| eval: false
print(True and True)
print(True or True)
print(False and True)
print((1+1>2) or (1-1<1))
```
:::



::: {#exr-}
## `==` vs `is`
Please explain what happens below.

```{python}
a = 1
b = 1.0
print(type(a))
print(type(b))

print(a == b)
print(a is b)
```
:::


::: {#exr-}
## Play with strings
Please excute the code below line by line and explain what happens in text cells.

```{python}
# 1
answer = 10
wronganswer = 11
text1 = "The answer to this question is {}. If you got {}, you are wrong.".format(answer, wronganswer)
print(text1)

# 2
var = True
text2 = "This is {}.".format(var)
print(text2)

# 3
word1 = 'Good '
word2 = 'buy. '
text3 = (word1 + word2) * 3
print(text3)

# 4
sentence = "This is\ngood enough\nfor a exercise to\nhave so many parts. " \
           "We would also want to try this symbol: '. " \
           "Do you know how to type \" in double quotes?"
print(sentence)
```
:::



::: {#exr-}
## `split` and `join`
Please excute the code below line by line and explain what happens in text cells.

```{python}
#| eval: false
sentence = 'This is an example of a sentence that I expect you to split.'

wordlist = sentence.split(' ')

newsentence = '\n'.join(wordlist)
print(newsentence)
```
:::



::: {#exr-}
## List reference

Please finish the following tasks.

1. Given the list `a`, make a new reference `b` to `a`. Update the first entry in `b` to be `0`. What happened to the first entry in `a`? Explain your answer in a text block.

2. Given the list `a`, make a new copy `b` of the list `a` using the function `list`. Update the first entry in `b` to be `0`. What happened to the first entry in `a`? Explain your answer in a text block. 
:::



::: {#exr-}
## List comprehension
Given a list of numbers, use list comprehension to remove all odd numbers from the list:
```{python}
numbers = [3,5,45,97,32,22,10,19,39,43]
```
:::

::: {#exr-}
## More list comprehension
Use list comprehension to find all of the numbers from 1-1000 that are divisible by 7.
:::

::: {#exr-}
## More list comprehension
Count the number of spaces in a string.
:::


::: {#exr-}
## More list comprehension
Use list comprehension to get the index and the value as a tuple for items in the list `['hi', 4, 8.99, 'apple', ('t,b', 'n')]`. Result would look like `[(index, value), (index, value), ...]`.
:::

::: {#exr-}
## More list comprehension
Use list comprehension to find the common numbers in two lists (without using a tuple or set) `list_a = [1, 2, 3, 4]`, `list_b = [2, 3, 4, 5]`.
:::


::: {#exr-}
## Probability
Compute the probability that two people out of 23 share the same birthday. The math formula for this is 
$$1-\frac{365!/(365-23)!}{365^{23}}=1-\frac{365}{365}\cdot\frac{365-1}{365}\cdot\frac{365-2}{365}\cdot\ldots\cdot\frac{365-22}{365}.$$

1. To directly use the formula we have to use a high performance math package, e.g. `math`. Please use `math.factorial` to compute the above formula.

2. Please use the right hand side of the above formula to compute the probability using the following steps.
    a. Please use the list comprehension to create a list $\left[\frac{365}{365},\frac{365-1}{365},\frac{365-2}{365},\ldots,\frac{365-22}{365}\right]$. 
    b. Use `numpy.prod` to compute the product of elements of the above list.
    c. Compute the probability by finishing the formula.

3. Please use `time` to test which method mentioned above is faster.
:::



::: {#exr-}
## Determine the indefinite article
Please finish the following tasks.

1. Please construct a list `aeiou` that contains all vowels.
2. Given a word `word`, we would like to find the indefinite article `article` before `word`. (Hint: the article should be `an` if the first character of `word` is a vowel, and `a` if not.)
:::
<details>
<summary> Click for Hint.</summary>
::: {.solution}
Consider `in`, `.lower()` and `if` structure.
:::
</details>



::: {#exr-}
## File names

1. Please use Python code to generate the following list of file names: `file0.txt`, `file1.txt`, `file2.txt`, ... `file9.txt`. 
2. Please use Python code to generate the following list of file names: `file0.txt`, `file1.txt`, `file2.txt`, ... `file10.txt`, `file11.txt`, ..., `file99.txt`, `file100.txt`. 
3. Please use Python code to generate the following list of file names: `file000.txt`, `file001.txt`, `file002.txt`, ... `file100.txt`. You may consider `.zfill()` to fill the zeros.
:::

::: {#exr-}
## Datetime and files names
We would like to write a program to quickly generate `N` files. (For example, we want to take random samples multiple times and we want to keep all our samples. Another example is to generate AI pictures.)

Every time we run the code, `N` files will be generated. We hope to store all files generated and organize them in a neat way. To achieve this, one way is to create a subfolder for each run and store all files generated during that run in the particular subfolder. Since we would like to make it fast, the real point of this task is to find a way to automatically generate the file names for the files generated and the folder names for the subfolders generated. You don't need to worry about the contents of the files and empty files are totally fine for this problem.
:::
<details>
<summary>Click for Hint.</summary>
::: {.solution}
One way to automatically generate file names and folder names is to use the date and the time when the code is run. Please check `datetime` package for getting and formatting date/time, and `os` packages for playing with files and folders.
:::
</details>




::: {#exr-}
## Color the Gnomic data
We can use ASCII color codes in the string to change the color of strings, as an example `\033[91m` for red and `\033[94m` for blue. See the following example.
```{python}
#| eval: false
print('\033[91m'+'red'+'\033[92m'+'green'+'\033[94m'+'blue'+'\033[93m'+'yellow')
```
Consider an (incomplete) Gnomic data given below which is represented by a long sequence of `A`, `C`, `T` and `G`. Please color it using ASCII color codes.

```{python}
Gnomicdata = 'TCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGG'\
             'CTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGAC'\
             'ACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATC'\
             'ATCAGCACATCTAGGTTTTGTCCGGGTGTGACCGAAAGGTAAGATGGAGAGCCTTGTCCC'\
             'TGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTTTTACAGGTTCGCGACGT'\
             'GCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCAGAGGCACGTCAACATCT'\
             'TAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTTTTGCCTCAACTTGAACA'\
             'GCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCTCATGGTCATGTTATGGT'\
             'TGAGCTGGTAGCAGAACTCGAAGGCATTCAGTACGGTCGTAGTGGTGAGACACTTGGTGT'\
             'CCTTGTCCCTCATGTGGGCGAAATACCAGTGGCTTACCGCAAGGTTCTTCTTCGTAAGAA'\
             'CGGTAATAAAGGAGCTGGTGGCCATAGTTACGGCGCCGATCTAAAGTCATTTGACTTAGG'\
             'CGACGAGCTTGGCACTGATCCTTATGAAGATTTTCAAGAAAACTGGAACACTAAACATAG'
```
:::

<details>
<summary>Click for Hint.</summary>

::: {.solution}
## Hint
You may use `if` to do the conversion. Or you may use `dict` to do the conversion.
:::
</details>



::: {#exr-}
## `sorted`
Please read through the [Key funtions](https://docs.python.org/3/howto/sorting.html#key-functions) in this article, and sort the following two lists.

1. Sort `list1 = [[11,2,3], [2, 3, 1], [5,-1, 2], [2, 3,-8]]` according to the sum of each list.

2. Sort `list2 = [{'a': 1, 'b': 2}, {'a': 3, 'b': 4},{'a': 5, 'b': 2}]` according to the `b` value of each dictionary.

:::




::: {#exr-fantasyinventorycode}
## Fantasy Game Inventory

You are creating a fantasy video game. The data structure to model the playerâ€™s inventory will be a dictionary where the keys are string values describing the item in the inventory and the value is an integer value detailing how many of that item the player has. For example, the dictionary value `{'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}` means the player has 1 rope, 6 torches, 42 gold coins, and so on.

Write a program to take any possible `inventory` and display it like the following:

```{python}
#| eval: false
Inventory:
12 arrow
42 gold coin
1 rope
6 torch
1 dagger
Total number of items: 62
```
:::


