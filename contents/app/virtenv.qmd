---
format:
   html:
     code-line-numbers: false
     code-block-border-left: false 
---

# Package management




## Package management
There are two most popular package management tools for Python, `pip` and `conda`. 

- [`pip`](https://pip.pypa.io/) is the official package management tool for Python. 
- [`conda`](https://github.com/conda/conda) was originally developed by Anaconda Inc., and later became open-sourced. 

In this course, we mainly focus on `conda` since it is designed towards Data Science.

- Install packages. You may specify the particular version number.

```{.bash}
conda install <pkg name>
conda install <pkg name>=<version number>
```

- List all installed packages, or list several specific installed packages:

```{.bash}
conda list
conda list <pkg names>
```

- Update packages.

```{.bash}
conda updata <pkg name>
```
- Remove packages.

```{.bash}
conda remove <pkg name>
```
- If the packages you want is in `PyPI` but not in `conda` channels, you may use `pip` to install that package.

```{.bash}
pip install <pkg name>
```
Note that if the package is in both `conda` channels and `PyPI`, it is recommended not to mix `pip` and `conda`. If you start from `conda`, just stick to `conda`. Only use `pip` when you have to.



::: {.callout-note collapse="true"}
## `PyPI` and `conda-forge`

The package managemers will download packages from online repository to install in your environment. By default, `pip` and `conda` use two different repositories. 

- [`PyPI`](https://pypi.org/): `PyPI` stands for *Python Package Index*. It is the official third-party software repository for Python. `pip` use it as the default source for packages and their dependencies. Packages on `PyPI` are typically uploaded by the author of the Python package. 
- [`conda-forge`](https://conda-forge.org/): Anaconda, Inc. provides several channels that host packages. `Conda-Forge` is one of the most important channels. Although it is a community project, it is now the recommended channel to get packages through `conda`. In `conda-forge`, package maintainers can be different than the original author of the package. 

Usually `PyPI` contains more packages than `conda-forge`, and the versions of packages get to `PyPI` faster. However, when using `conda` through `conda-forge`, more safty checks are done and `conda` will try its best to make the installed packages compatible. 

To install from `conda-forge` using `conda`, you should add an argument `-c`:

```{.bash}
conda install -c conda-forge <pkg name>
```
:::





## Virtual environments
Virtual environments provide a project-specific version of installed packages. This both helps you to faithfully reproduce your environment as well as isolate the use of packages so that upgrading a package in one project doesnâ€™t break other projects. In this section we are going to use `conda` to manage environments.


::: {.callout-note collapse="true"}
## `pip` and `venv`
Unlike `conda`, `pip` is only a package manager, and it doesn't provide any virtual environment functions. The default virtual environment tool for Python is `venv`. 
:::




## `mamba`
[`mamba`](https://github.com/mamba-org/mamba) is a reimplementation of the `conda` package manager in `C++`. It can be installed directly from `conda-forge`. 

```{.bash}
conda install -c conda-forge mamba
```
After you install it in one of your environment, you may use it in all your environments.

`mamba` can be treated as a drop-in replacement of `conda`. All commands we mentioned above can be rewritten by replacing `conda` with `mamba`. One of the reasons to use `mamba` over `conda` is that `mamba` runs so much faster than `conda`.




## `requirement.txt`


